const { MockDocumentAPI } = require('./dist/implementations/MockDocumentAPI');

async function testMockData() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö Mock –¥–∞–Ω–Ω—ã—Ö...\n');
  
  const mockAPI = new MockDocumentAPI();
  
  try {
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    const users = await mockAPI.getUsersByNames('–ü–µ—Ç—Ä–æ–≤,–°–∏–¥–æ—Ä–æ–≤–∞,–ö–æ–∑–ª–æ–≤');
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    users.forEach(user => console.log(`   - ${user.userName}`));
    
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:');
    const project1 = await mockAPI.getProjectByName('–ì–ï–†–û–§–ê–†–ú');
    const project2 = await mockAPI.getProjectByName('–Ø–Ω–¥–µ–∫—Å');
    console.log(`   –ì–ï–†–û–§–ê–†–ú: ${project1 ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    console.log(`   –Ø–Ω–¥–µ–∫—Å: ${project2 ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç:');
    const workTypes = await mockAPI.getWorkTypes();
    console.log(`   –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç: ${workTypes.length}`);
    console.log(`   –ü—Ä–∏–º–µ—Ä—ã: ${workTypes.slice(0, 5).map(wt => wt.name).join(', ')}`);
    
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á:');
    const tasks = await mockAPI.getTasksByUserId('test-user');
    console.log(`   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.length}`);
    tasks.forEach(task => console.log(`   - ${task.name}`));
    
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏:');
    const timeData = await mockAPI.getStuffTime({ userId: '' });
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏: ${timeData.length}`);
    
    let totalMinutes = 0;
    timeData.forEach(userData => {
      totalMinutes += userData.countOfMinutes;
      console.log(`   - ${userData.user}: ${userData.countOfMinutes} –º–∏–Ω (${userData.stufftime.length} –∑–∞–ø–∏—Å–µ–π)`);
    });
    
    console.log(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${totalMinutes} –º–∏–Ω—É—Ç (${Math.round(totalMinutes/60)} —á–∞—Å–æ–≤)`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ${Math.round(totalMinutes/timeData.length)} –º–∏–Ω—É—Ç`);
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

testMockData();
