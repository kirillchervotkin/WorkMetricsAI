import { Context } from "grammy";
import { apiContainer, getDocumentAPI } from "../container/DIContainer";
import { HybridDocumentAPI } from "../implementations/HybridDocumentAPI";

export async function testHandler(ctx: Context) {
  const messageText = ctx.message?.text || "";
  const args = messageText.split(" ").slice(1);

  if (args.length === 0) {
    await ctx.reply(
      `üß™ **–ö–æ–º–∞–Ω–¥–∞ /test - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –¥–∞–Ω–Ω—ã—Ö**\n\n` +
      `**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n` +
      `‚Ä¢ \`/test status\` - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º\n` +
      `‚Ä¢ \`/test mock\` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n` +
      `‚Ä¢ \`/test real\` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API\n` +
      `‚Ä¢ \`/test hybrid\` - –≤–∫–ª—é—á–∏—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º (—Ä–µ–∞–ª—å–Ω—ã–π + fallback)\n` +
      `‚Ä¢ \`/test connection\` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É API\n` +
      `‚Ä¢ \`/test query <–∑–∞–ø—Ä–æ—Å>\` - –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n\n` +
      `**–ü—Ä–∏–º–µ—Ä—ã:**\n` +
      `‚Ä¢ \`/test query –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–ª –≤—á–µ—Ä–∞\`\n` +
      `‚Ä¢ \`/test query —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —É –ê—Ä—Ç–µ–º–∞\`\n` +
      `‚Ä¢ \`/test query —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤\``,
      { parse_mode: "Markdown" }
    );
    return;
  }

  const command = args[0].toLowerCase();

  switch (command) {
    case "status":
      await handleStatusCommand(ctx);
      break;
    
    case "mock":
      await handleSwitchCommand(ctx, "mock");
      break;
    
    case "real":
      await handleSwitchCommand(ctx, "real");
      break;
    
    case "hybrid":
      await handleSwitchCommand(ctx, "hybrid");
      break;
    
    case "connection":
      await handleConnectionTest(ctx);
      break;
    
    case "query":
      const query = args.slice(1).join(" ");
      if (query) {
        await handleTestQuery(ctx, query);
      } else {
        await ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã query\n\n–ü—Ä–∏–º–µ—Ä: `/test query –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–ª –≤—á–µ—Ä–∞`");
      }
      break;
    
    default:
      await ctx.reply(
        `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: \`${command}\`\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/test\` –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø—Ä–∞–≤–∫–∏.`,
        { parse_mode: "Markdown" }
      );
  }
}

async function handleStatusCommand(ctx: Context) {
  try {
    await ctx.replyWithChatAction("typing");
    
    const api = getDocumentAPI();
    let statusMessage = "üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –¥–∞–Ω–Ω—ã—Ö:**\n\n";

    if (api instanceof HybridDocumentAPI) {
      const hybridAPI = api as any;
      const currentMode = hybridAPI.getCurrentMode ? hybridAPI.getCurrentMode() : 'unknown';
      
      statusMessage += `üîÑ **–†–µ–∂–∏–º:** –ì–∏–±—Ä–∏–¥–Ω—ã–π (${currentMode})\n`;
      statusMessage += `üì° **–û–ø–∏—Å–∞–Ω–∏–µ:** –ü—Ä–æ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n`;

      if (hybridAPI.getStatus) {
        const status = await hybridAPI.getStatus();
        if (status.success) {
          statusMessage += `‚úÖ **–†–µ–∞–ª—å–Ω—ã–π API:** ${status.data.realAPIAvailable ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n`;
          statusMessage += `üé≠ **–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:** ${status.data.mockAPIAvailable ? '–î–æ—Å—Ç—É–ø–Ω—ã' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}\n`;
        }
      }
    } else {
      statusMessage += `üì° **–†–µ–∂–∏–º:** –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π\n`;
      statusMessage += `üîß **–¢–∏–ø API:** ${api.constructor.name}\n`;
    }
    
    statusMessage += `\nüí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/test connection\` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É API`;
    
    await ctx.reply(statusMessage, { parse_mode: "Markdown" });
    
  } catch (error: any) {
    console.error("Error in status command:", error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
  }
}

async function handleSwitchCommand(ctx: Context, mode: 'mock' | 'real' | 'hybrid') {
  try {
    await ctx.replyWithChatAction("typing");
    
    let message = "";
    
    switch (mode) {
      case 'mock':
        apiContainer.switchToMock();
        message = "üé≠ **–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ**\n\n" +
                 "–¢–µ–ø–µ—Ä—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n" +
                 "–≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.";
        break;
      
      case 'real':
        apiContainer.switchToReal();
        message = "üåê **–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API**\n\n" +
                 "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è –æ—à–∏–±–∫–æ–π.\n" +
                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/test connection` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.";
        break;
      
      case 'hybrid':
        apiContainer.switchToHybrid();
        message = "üîÑ **–í–∫–ª—é—á–µ–Ω –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º**\n\n" +
                 "–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API, –∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ " +
                 "–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –≠—Ç–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã.";
        break;
    }
    
    await ctx.reply(message, { parse_mode: "Markdown" });
    
  } catch (error: any) {
    console.error(`Error switching to ${mode}:`, error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤ —Ä–µ–∂–∏–º ${mode}: ${error.message}`);
  }
}

async function handleConnectionTest(ctx: Context) {
  try {
    await ctx.replyWithChatAction("typing");
    await ctx.reply("üîå –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É API...");

    const { RealDocumentAPI } = await import("../implementations/RealDocumentAPI");
    const realAPI = new RealDocumentAPI();
    const result = await realAPI.testConnection();
    
    let message = "üì° **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**\n\n";
    
    if (result.success) {
      message += `‚úÖ **–°—Ç–∞—Ç—É—Å:** –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n`;
      message += `üìä **–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞:** ${result.data?.statusCode || 'N/A'}\n`;
      message += `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API`;
    } else {
      message += `‚ùå **–°—Ç–∞—Ç—É—Å:** –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ\n`;
      message += `üìù **–û—à–∏–±–∫–∞:** ${result.message}\n`;
      message += `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º`;
      
      if (result.error) {
        message += `\nüîç **–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:** ${JSON.stringify(result.error, null, 2)}`;
      }
    }
    
    await ctx.reply(message, { parse_mode: "Markdown" });
    
  } catch (error: any) {
    console.error("Error testing connection:", error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
  }
}

async function handleTestQuery(ctx: Context, query: string) {
  try {
    await ctx.replyWithChatAction("typing");

    await ctx.reply(`üß™ **–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:** "${query}"\n\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...`);

    const { handleQuery } = await import("./query-handler");
    const fakeMessage = { text: query };
    const fakeCtx = {
      ...ctx,
      message: { ...ctx.message, ...fakeMessage },
      reply: async (text: string, options?: any) => {
        const testPrefix = "üß™ **[–¢–ï–°–¢]** ";
        return ctx.reply(testPrefix + text, options);
      }
    };
    await handleQuery(fakeCtx as any);
    
  } catch (error: any) {
    console.error("Error in test query:", error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
  }
}
