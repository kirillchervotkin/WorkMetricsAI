import { Context } from "grammy";
import { SimpleDocumentAPIAdapter } from "../adapters/SimpleDocumentAPIAdapter";
import { geminiService } from "../services/gemini";

/**
 * –ü–†–û–°–¢–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ü–†–û–°–û–í
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –î–û ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ LLM ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
 */
export async function handleQuery(ctx: Context) {
  if (!ctx.message?.text) return;

  const userQuery = ctx.message.text;

  try {
    await ctx.replyWithChatAction("typing");
    console.log(`üìù –ó–∞–ø—Ä–æ—Å: "${userQuery}"`);

    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –î–û
    const allData = await getAllDataFromDO();
    
    console.log("üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", {
      users: allData.users.length,
      projects: allData.projects.length,
      tasks: allData.tasks.length,
      timeEntries: allData.timeEntries.length
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const response = await analyzeWithLLM(userQuery, allData);
    
    await ctx.reply(response, { parse_mode: "HTML" });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞
 */
async function getAllDataFromDO() {
  const adapter = new SimpleDocumentAPIAdapter();
  return await adapter.loadAllData();
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é LLM
 */
async function analyzeWithLLM(userQuery: string, allData: any): Promise<string> {
  console.log("üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM...");

  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const context = formatDataForLLM(allData, userQuery);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
    const response = await geminiService.enhanceResponse([{ context }], "data_analysis", userQuery);

    if (response) {
      console.log("‚úÖ LLM –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ");
      return response;
    } else {
      console.log("‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback");
      return createSmartFallback(userQuery, allData);
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ LLM:", error);
    return createSmartFallback(userQuery, allData);
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–Ω—è—Ç–Ω–æ–º –¥–ª—è LLM –≤–∏–¥–µ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
 */
function formatDataForLLM(allData: any, userQuery: string): string {
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –≤ –∑–∞–ø—Ä–æ—Å–µ
  const timeFilter = analyzeTimeFilter(userQuery);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const filteredData = filterDataByTime(allData, timeFilter);

  let context = `–í–û–ü–†–û–°: "${userQuery}"\n`;
  context += `–°–ï–ì–û–î–ù–Ø: ${new Date().toISOString().split('T')[0]}\n`;
  context += `–ê–ù–ê–õ–ò–ó –ü–ï–†–ò–û–î–ê: ${timeFilter.description}\n\n`;

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã
  context += `–¢–†–£–î–û–ó–ê–¢–†–ê–¢–´ –ó–ê –£–ö–ê–ó–ê–ù–ù–´–ô –ü–ï–†–ò–û–î:\n\n`;

  if (filteredData.timeEntries.length === 0) {
    context += `‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç –∑–∞ ${timeFilter.description.toLowerCase()}\n\n`;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–ø—Ä–æ—Å–µ
    const mentionedUsers = findMentionedUsers(userQuery, allData.users);

    if (mentionedUsers.length > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      context += `–ü–û–°–õ–ï–î–ù–ò–ï –î–û–°–¢–£–ü–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –£–ü–û–ú–Ø–ù–£–¢–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n\n`;

      mentionedUsers.forEach(userName => {
        const userEntries = allData.timeEntries.filter((entry: any) =>
          entry.employee_name === userName
        ).slice(0, 3);

        if (userEntries.length > 0) {
          context += `${userName}:\n`;
          userEntries.forEach((entry: any, index: number) => {
            context += `   ${index + 1}. –†–∞–±–æ—Ç–∞: ${entry.description}\n`;
            context += `      –í—Ä–µ–º—è: ${entry.hours} —á–∞—Å–æ–≤\n`;
            context += `      –î–∞—Ç–∞: ${entry.date}\n\n`;
          });
        } else {
          context += `${userName}: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n`;
        }
      });
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
      context += `–ü–û–°–õ–ï–î–ù–ò–ï –î–û–°–¢–£–ü–ù–´–ï –î–ê–ù–ù–´–ï:\n\n`;
      allData.timeEntries.slice(0, 3).forEach((entry: any, index: number) => {
        context += `${index + 1}. ${entry.employee_name}\n`;
        context += `   –†–∞–±–æ—Ç–∞: ${entry.description}\n`;
        context += `   –í—Ä–µ–º—è: ${entry.hours} —á–∞—Å–æ–≤\n`;
        context += `   –î–∞—Ç–∞: ${entry.date}\n\n`;
      });
    }
  } else {
    filteredData.timeEntries.forEach((entry: any, index: number) => {
      context += `${index + 1}. ${entry.employee_name}\n`;
      context += `   –†–∞–±–æ—Ç–∞: ${entry.description}\n`;
      context += `   –í—Ä–µ–º—è: ${entry.hours} —á–∞—Å–æ–≤\n`;
      context += `   –î–∞—Ç–∞: ${entry.date}\n\n`;
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
  context += `–ó–ê–î–ê–ß–ò –°–û–¢–†–£–î–ù–ò–ö–û–í:\n\n`;
  allData.tasks.forEach((task: any, index: number) => {
    context += `${index + 1}. ${task.employee_name}\n`;
    context += `   –ó–∞–¥–∞—á–∞: ${task.title}\n`;
    context += `   –°—Ä–æ–∫: ${task.date}\n\n`;
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  context += `–°–ü–ò–°–û–ö –°–û–¢–†–£–î–ù–ò–ö–û–í:\n`;
  allData.users.forEach((user: any, index: number) => {
    context += `${index + 1}. ${user.name}\n`;
  });

  context += `\n–ò–ù–°–¢–†–£–ö–¶–ò–Ø:
- –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥: ${timeFilter.description}
- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
- –ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
- –ò—Å–ø–æ–ª—å–∑—É–π HTML —Ä–∞–∑–º–µ—Ç–∫—É: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>
- –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏
- –ë—É–¥—å —Ç–æ—á–Ω—ã–º —Å –¥–∞—Ç–∞–º–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏`;

  return context;
}

/**
 * –£–º–Ω—ã–π fallback –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
 */
function createSmartFallback(userQuery: string, allData: any): string {
  const query = userQuery.toLowerCase();

  // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–º–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ
  const mentionedNames: string[] = [];
  allData.users.forEach((user: any) => {
    const firstName = user.name.split(' ')[0].toLowerCase();
    if (query.includes(firstName)) {
      mentionedNames.push(user.name);
    }
  });

  if (mentionedNames.length > 0) {
    // –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ª—é–¥–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã
    let response = `üìä <b>–¢—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>\n\n`;

    mentionedNames.forEach(name => {
      const userEntries = allData.timeEntries.filter((entry: any) =>
        entry.employee_name === name
      );

      if (userEntries.length > 0) {
        const totalHours = userEntries.reduce((sum: number, entry: any) => sum + entry.hours, 0);

        response += `üë§ <b>${name}</b>\n`;
        response += `‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: <b>${totalHours} —á–∞—Å–æ–≤</b>\n\n`;

        userEntries.forEach((entry: any, index: number) => {
          response += `${index + 1}. ${entry.description}\n`;
          response += `   üïê ${entry.hours} —á. | üìÖ ${entry.date}\n\n`;
        });

        response += `\n`;
      } else {
        response += `üë§ <b>${name}</b>\n`;
        response += `‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n`;
      }
    });

    return response;
  }

  // –û–±—â–∏–π fallback
  return `üìä <b>–î–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞</b>

–ü–æ –∑–∞–ø—Ä–æ—Å—É: <i>"${userQuery}"</i>

üìà <b>–î–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${allData.users.length}
üèóÔ∏è –ü—Ä–æ–µ–∫—Ç—ã: ${allData.projects.length}
üìã –ó–∞–¥–∞—á–∏: ${allData.tasks.length}
‚è±Ô∏è –ó–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏: ${allData.timeEntries.length}
‚öôÔ∏è –í–∏–¥—ã —Ä–∞–±–æ—Ç: ${allData.workTypes.length}

üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ</i>

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–ß—Ç–æ –¥–µ–ª–∞–ª –ê—Ä—Ç–µ–º?"
‚Ä¢ "–¢—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –ö–∏—Ä–∏–ª–ª–∞"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–ª –°–µ—Ä–≥–µ–π?"`;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function analyzeTimeFilter(userQuery: string): {
  startDate: string;
  endDate: string;
  description: string;
} {
  const query = userQuery.toLowerCase();
  const today = new Date();
  const todayStr = today.toISOString().split('T')[0];

  // –ó–∞ –Ω–µ–¥–µ–ª—é
  if (query.includes('–∑–∞ –Ω–µ–¥–µ–ª—é') || query.includes('–Ω–∞ –Ω–µ–¥–µ–ª–µ') || query.includes('–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é')) {
    const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
    return {
      startDate: weekAgo.toISOString().split('T')[0],
      endDate: todayStr,
      description: '–ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é (7 –¥–Ω–µ–π)'
    };
  }

  // –ó–∞ –º–µ—Å—è—Ü
  if (query.includes('–∑–∞ –º–µ—Å—è—Ü') || query.includes('–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ') || query.includes('–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü')) {
    const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);
    return {
      startDate: monthAgo.toISOString().split('T')[0],
      endDate: todayStr,
      description: '–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü (30 –¥–Ω–µ–π)'
    };
  }

  // –°–µ–≥–æ–¥–Ω—è
  if (query.includes('—Å–µ–≥–æ–¥–Ω—è') || query.includes('–∑–∞ —Å–µ–≥–æ–¥–Ω—è')) {
    return {
      startDate: todayStr,
      endDate: todayStr,
      description: '—Å–µ–≥–æ–¥–Ω—è'
    };
  }

  // –í—á–µ—Ä–∞
  if (query.includes('–≤—á–µ—Ä–∞') || query.includes('–∑–∞ –≤—á–µ—Ä–∞')) {
    const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
    const yesterdayStr = yesterday.toISOString().split('T')[0];
    return {
      startDate: yesterdayStr,
      endDate: yesterdayStr,
      description: '–≤—á–µ—Ä–∞'
    };
  }

  // –ó–∞ 3 –¥–Ω—è, –∑–∞ 5 –¥–Ω–µ–π –∏ —Ç.–¥.
  const daysMatch = query.match(/–∑–∞ (\d+) –¥–Ω/);
  if (daysMatch) {
    const days = parseInt(daysMatch[1]);
    const daysAgo = new Date(today.getTime() - days * 24 * 60 * 60 * 1000);
    return {
      startDate: daysAgo.toISOString().split('T')[0],
      endDate: todayStr,
      description: `–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${days} –¥–Ω–µ–π`
    };
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥
  return {
    startDate: '2025-01-01',
    endDate: todayStr,
    description: '–≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
  };
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
 */
function filterDataByTime(allData: any, timeFilter: any): any {
  const filteredTimeEntries = allData.timeEntries.filter((entry: any) => {
    return entry.date >= timeFilter.startDate && entry.date <= timeFilter.endDate;
  });

  const filteredTasks = allData.tasks.filter((task: any) => {
    return task.date >= timeFilter.startDate && task.date <= timeFilter.endDate;
  });

  return {
    ...allData,
    timeEntries: filteredTimeEntries,
    tasks: filteredTasks
  };
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function findMentionedUsers(userQuery: string, users: any[]): string[] {
  const query = userQuery.toLowerCase();
  const mentionedUsers: string[] = [];

  users.forEach((user: any) => {
    const firstName = user.name.split(' ')[0].toLowerCase();
    if (query.includes(firstName)) {
      mentionedUsers.push(user.name);
    }
  });

  return mentionedUsers;
}
