import { Context } from "grammy";
import { DataProcessor } from "../services/DataProcessor";
import { geminiService } from "../services/gemini";

/**
 * –ü–†–û–°–¢–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ü–†–û–°–û–í
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –î–û ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ LLM ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
 */
export async function handleQuery(ctx: Context) {
  if (!ctx.message?.text) return;

  const userQuery = ctx.message.text;

  try {
    await ctx.replyWithChatAction("typing");
    console.log(`üìù –ó–∞–ø—Ä–æ—Å: "${userQuery}"`);

    // –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –î–û
    const processor = new DataProcessor();
    const processedData = await processor.processQueryData(userQuery);
    
    console.log("üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", processedData.summary);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const response = await analyzeWithLLM(userQuery, processedData);
    
    await ctx.reply(response, { parse_mode: "HTML" });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
  }
}



/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é LLM
 */
async function analyzeWithLLM(userQuery: string, processedData: any): Promise<string> {
  console.log("üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ LLM...");

  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
    const context = formatDataForLLM(processedData, userQuery);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
    const response = await geminiService.enhanceResponse([{ context }], "data_analysis", userQuery);

    if (response) {
      console.log("‚úÖ LLM –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
      return response;
    } else {
      console.log("‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback");
      return "‚ùå LLM —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ LLM:", error);
    return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
 */
function formatDataForLLM(processedData: any, userQuery: string): string {
  let context = `–í–û–ü–†–û–°: "${userQuery}"\n`;
  context += `–°–ï–ì–û–î–ù–Ø: ${new Date().toISOString().split('T')[0]}\n`;
  context += `–ü–ï–†–ò–û–î –ê–ù–ê–õ–ò–ó–ê: ${processedData.summary.dateRange}\n\n`;

  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  context += `üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`;
  context += `‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${processedData.summary.totalUsers}\n`;
  context += `‚Ä¢ –ó–∞–¥–∞—á: ${processedData.summary.totalTasks}\n`;
  context += `‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏: ${processedData.summary.totalTimeEntries}\n`;
  context += `‚Ä¢ –ü—Ä–æ–µ–∫—Ç–æ–≤: ${processedData.summary.totalProjects}\n\n`;

  // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  if (processedData.employees.length > 0) {
    context += `üë• –ê–ö–¢–ò–í–ù–û–°–¢–¨ –°–û–¢–†–£–î–ù–ò–ö–û–í:\n`;
    processedData.employees.slice(0, 10).forEach((emp: any) => {
      context += `‚Ä¢ ${emp.name}: ${emp.taskCount} –∑–∞–¥–∞—á, ${emp.totalHours.toFixed(1)} —á–∞—Å–æ–≤\n`;
      if (emp.recentTasks.length > 0) {
        context += `  –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${emp.recentTasks.slice(0, 3).join(', ')}\n`;
      }
    });
    context += `\n`;
  }

  // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  if (processedData.recentActivity.length > 0) {
    context += `‚è∞ –ü–û–°–õ–ï–î–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:\n`;
    processedData.recentActivity.slice(0, 15).forEach((activity: any) => {
      context += `‚Ä¢ ${activity.date}: ${activity.employee} - ${activity.task} (${activity.hours}—á)\n`;
      if (activity.description) {
        context += `  ${activity.description}\n`;
      }
    });
    context += `\n`;
  }

  // –¢–æ–ø –∑–∞–¥–∞—á –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  if (processedData.topTasks.length > 0) {
    context += `üî• –¢–û–ü –ó–ê–î–ê–ß –ü–û –í–†–ï–ú–ï–ù–ò:\n`;
    processedData.topTasks.slice(0, 10).forEach((task: any, index: number) => {
      context += `${index + 1}. ${task.title} - ${task.hours.toFixed(1)}—á (${task.employee})\n`;
    });
    context += `\n`;
  }

  context += `\nüí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.`;

  return context;
}
