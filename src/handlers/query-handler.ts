import { Context } from "grammy";
import { DataProcessor } from "../services/DataProcessor";
import { geminiService } from "../services/gemini";

const ANALYSIS_TEMPLATES = {
  productivity: `
üéØ –ê–ù–ê–õ–ò–ó –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã:
1. –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã vs –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
2. –°—Ä–∞–≤–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
3. –í—ã—è–≤–∏ —Å–∞–º—ã–µ –≤—Ä–µ–º—è–∑–∞—Ç—Ä–∞—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
4. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  `,

  overdue: `
‚ö†Ô∏è –ê–ù–ê–õ–ò–ó –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –ó–ê–î–ê–ß:
–ù–∞–π–¥–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏:
1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
2. –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã
3. –£ –∫–∞–∫–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–æ—Å—Ä–æ—á–µ–∫
4. –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–ª–∞–Ω —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–∫
  `,

  tasks: `
üìã –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß:
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∑–∞–¥–∞—á –∫–æ–º–∞–Ω–¥—ã:
1. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∑–∞ –ø–µ—Ä–∏–æ–¥
2. –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
3. –í—Ä–µ–º—è, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
  `,

  time: `
‚è∞ –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ò:
–ê–Ω–∞–ª–∏–∑ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç –∫–æ–º–∞–Ω–¥—ã:
1. –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ –¥–Ω—è–º
2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∑–∞–¥–∞—á–∞–º
3. –ü–∏–∫–æ–≤—ã–µ –∏ —Å–ø–æ–∫–æ–π–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç
  `
};

function validateAndImproveQuery(userQuery: string): string {
  const improvements = [];

  if (userQuery.length < 10) {
    improvements.push("–£–¢–û–ß–ù–ò: –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π. –£–∫–∞–∂–∏ –ø–µ—Ä–∏–æ–¥, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏.");
  }

  if (!containsTimeReference(userQuery)) {
    improvements.push("–ü–ï–†–ò–û–î: –ù–µ —É–∫–∞–∑–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.");
  }

  if (improvements.length > 0) {
    return `‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –ó–ê–ü–†–û–°–ê:\n‚Ä¢ ${improvements.join('\n‚Ä¢ ')}\n\n–ò–°–•–û–î–ù–´–ô –ó–ê–ü–†–û–°: "${userQuery}"\n\n`;
  }

  return `‚úÖ –ó–ê–ü–†–û–°: "${userQuery}"\n\n`;
}

function containsTimeReference(query: string): boolean {
  const timeKeywords = [
    '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞', '–Ω–µ–¥–µ–ª—é', '–º–µ—Å—è—Ü', '–≥–æ–¥', '–¥–µ–Ω—å', '–¥–Ω–µ–π',
    '—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
    '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å',
    '2024', '2023', '2025'
  ];

  return timeKeywords.some(keyword => query.toLowerCase().includes(keyword));
}

function getAnalysisTemplate(userQuery: string): string {
  const queryLower = userQuery.toLowerCase();

  if (queryLower.includes('–ø—Ä–æ—Å—Ä–æ—á') || queryLower.includes('deadline') || queryLower.includes('—Å—Ä–æ–∫')) {
    return ANALYSIS_TEMPLATES.overdue;
  }

  if (queryLower.includes('–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω') || queryLower.includes('—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω') || queryLower.includes('–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω')) {
    return ANALYSIS_TEMPLATES.productivity;
  }

  if (queryLower.includes('–∑–∞–¥–∞—á') || queryLower.includes('–¥–µ–ª') || queryLower.includes('—Ä–∞–±–æ—Ç')) {
    return ANALYSIS_TEMPLATES.tasks;
  }

  if (queryLower.includes('–≤—Ä–µ–º—è') || queryLower.includes('—á–∞—Å') || queryLower.includes('—Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç')) {
    return ANALYSIS_TEMPLATES.time;
  }

  return '';
}

function prioritizeDataByQuery(userQuery: string, processedData: any): any {
  const queryLower = userQuery.toLowerCase();

  const focuses = {
    productivity: ['–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
    tasks: ['–∑–∞–¥–∞—á', '–¥–µ–ª', '—Ä–∞–±–æ—Ç'],
    time: ['–≤—Ä–µ–º—è', '—á–∞—Å', '—Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç'],
    employees: ['—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–∫–æ–º–∞–Ω–¥', '–ª—é–¥–µ–π'],
    overdue: ['–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω', 'deadline', '—Å—Ä–æ–∫']
  };

  const detectedFocus = Object.entries(focuses).find(([key, keywords]) =>
    keywords.some(keyword => queryLower.includes(keyword))
  )?.[0] || 'general';

  switch(detectedFocus) {
    case 'productivity':
      return prioritizeProductivityData(processedData);
    case 'tasks':
      return prioritizeTasksData(processedData);
    case 'time':
      return prioritizeTimeData(processedData);
    case 'employees':
      return prioritizeEmployeesData(processedData);
    default:
      return processedData;
  }
}

function prioritizeProductivityData(processedData: any): any {
  const sortedEmployees = processedData.employees
    .sort((a: any, b: any) => (b.totalHours / Math.max(b.taskCount, 1)) - (a.totalHours / Math.max(a.taskCount, 1)))
    .slice(0, 5);

  return {
    ...processedData,
    employees: sortedEmployees,
    focus: 'productivity'
  };
}

function prioritizeTasksData(processedData: any): any {
  const sortedEmployees = processedData.employees
    .sort((a: any, b: any) => b.taskCount - a.taskCount)
    .slice(0, 5);

  return {
    ...processedData,
    employees: sortedEmployees,
    topTasks: processedData.topTasks.slice(0, 10),
    focus: 'tasks'
  };
}

function prioritizeTimeData(processedData: any): any {
  const sortedEmployees = processedData.employees
    .sort((a: any, b: any) => b.totalHours - a.totalHours)
    .slice(0, 5);

  return {
    ...processedData,
    employees: sortedEmployees,
    recentActivity: processedData.recentActivity.slice(0, 15),
    focus: 'time'
  };
}

function prioritizeEmployeesData(processedData: any): any {
  return {
    ...processedData,
    employees: processedData.employees.slice(0, 10),
    focus: 'employees'
  };
}

function formatPrioritizedEmployeeData(prioritizedData: any): string {
  let context = '';

  if (prioritizedData.employees.length > 0) {
    const focusTitle = getFocusTitle(prioritizedData.focus);
    context += `üë• ${focusTitle}:\n`;

    prioritizedData.employees.forEach((emp: any, index: number) => {
      context += `\nüìã ${index + 1}. ${emp.name}:\n`;
      context += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${emp.taskCount}\n`;
      context += `‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${emp.totalHours.toFixed(1)} —á–∞—Å–æ–≤\n`;

      if (prioritizedData.focus === 'productivity') {
        const efficiency = emp.taskCount > 0 ? (emp.totalHours / emp.taskCount).toFixed(1) : '0';
        context += `‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${efficiency} —á–∞—Å–æ–≤ –Ω–∞ –∑–∞–¥–∞—á—É\n`;
      }

      if (emp.workTypes.length > 0) {
        context += `‚Ä¢ –¢–∏–ø—ã —Ä–∞–±–æ—Ç: ${emp.workTypes.join(', ')}\n`;
      }

      if (emp.projects.length > 0) {
        context += `‚Ä¢ –ü—Ä–æ–µ–∫—Ç—ã: ${emp.projects.join(', ')}\n`;
      }

      if (emp.allTasks.length > 0 && prioritizedData.focus === 'tasks') {
        context += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n`;
        emp.allTasks.slice(0, 3).forEach((task: any, taskIndex: number) => {
          context += `  ${taskIndex + 1}. ${task.title} (${task.hours}—á, ${task.date})\n`;
        });
      }

      if (emp.timeEntries.length > 0 && prioritizedData.focus === 'time') {
        context += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏:\n`;
        emp.timeEntries.slice(0, 3).forEach((entry: any, entryIndex: number) => {
          context += `  ${entryIndex + 1}. ${entry.date}: ${entry.hours}—á - ${entry.description}\n`;
        });
      }
    });
    context += `\n`;
  }

  return context;
}

function getFocusTitle(focus: string): string {
  switch(focus) {
    case 'productivity': return '–ê–ù–ê–õ–ò–ó –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò –°–û–¢–†–£–î–ù–ò–ö–û–í';
    case 'tasks': return '–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –ó–ê–î–ê–ß–ê–ú';
    case 'time': return '–ê–ù–ê–õ–ò–ó –¢–†–£–î–û–ó–ê–¢–†–ê–¢ –ü–û –í–†–ï–ú–ï–ù–ò';
    case 'employees': return '–ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –°–û–¢–†–£–î–ù–ò–ö–ê–ú';
    default: return '–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –°–û–¢–†–£–î–ù–ò–ö–ê–ú';
  }
}

/**
 * –ü–†–û–°–¢–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ü–†–û–°–û–í
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –î–û ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ LLM ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
 */
export async function handleQuery(ctx: Context) {
  if (!ctx.message?.text) return;

  const userQuery = ctx.message.text;

  try {
    await ctx.replyWithChatAction("typing");
    console.log(`üìù –ó–∞–ø—Ä–æ—Å: "${userQuery}"`);

    // –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –î–û
    const processor = new DataProcessor();
    const processedData = await processor.processQueryData(userQuery);
    
    console.log("üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", processedData.summary);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const response = await analyzeWithLLM(userQuery, processedData);
    
    await ctx.reply(response, { parse_mode: "HTML" });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
  }
}



/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é LLM
 */
async function analyzeWithLLM(userQuery: string, processedData: any): Promise<string> {
  console.log("üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ LLM...");

  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
    const context = formatDataForLLM(processedData, userQuery);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
    const response = await geminiService.enhanceResponse([{ context }], "data_analysis", userQuery);

    if (response) {
      console.log("‚úÖ LLM –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
      // –û—á–∏—â–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML —Ç–µ–≥–∏
      const cleanResponse = cleanUnsupportedHtmlTags(response);
      return cleanResponse;
    } else {
      console.log("‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback");
      return "‚ùå LLM —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ LLM:", error);
    return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
 */
function formatDataForLLM(processedData: any, userQuery: string): string {
  let context = `ü§ñ –†–û–õ–¨: –¢—ã - –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º.\n\n`;

  context += `üéØ –ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞ –∏ –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n`;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
  context += validateAndImproveQuery(userQuery);

  context += `üìä –ü–ï–†–ò–û–î –ê–ù–ê–õ–ò–ó–ê: ${processedData.summary.dateRange}\n`;
  context += `üìÖ –°–ï–ì–û–î–ù–Ø: ${new Date().toISOString().split('T')[0]}\n`;
  context += `üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø: ${processedData.summary.queryStrategy || '–°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø'}\n`;
  if (processedData.summary.targetEmployee) {
    context += `üë§ –¶–ï–õ–ï–í–û–ô –°–û–¢–†–£–î–ù–ò–ö: ${processedData.summary.targetEmployee}\n`;
  }
  context += `\n`;

  // Template –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
  const template = getAnalysisTemplate(userQuery);
  if (template) {
    context += template + '\n';
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  if (processedData.summary.queryStrategy === '–í–°–ï_–î–ê–ù–ù–´–ï_–°–û–¢–†–£–î–ù–ò–ö–ê') {
    context += `üîç –û–°–û–ë–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –°–û–¢–†–£–î–ù–ò–ö–ê:\n`;
    context += `‚Ä¢ –í –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –í–°–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥\n`;
    context += `‚Ä¢ –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, —Ñ–∏–ª—å—Ç—Ä—É—è –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–º—ã—Å–ª—É\n`;
    context += `‚Ä¢ –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –ø–æ–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ —Ç–µ –¥–∞–Ω–Ω—ã–µ\n`;
    context += `‚Ä¢ –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ–±—â–∏–π - –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n`;
  } else if (processedData.summary.queryStrategy === '–ü–û–ò–°–ö_–ù–ï–ò–ó–í–ï–°–¢–ù–û–ì–û_–°–û–¢–†–£–î–ù–ò–ö–ê') {
    context += `üîç –û–°–û–ë–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ü–û–ò–°–ö–ê –ù–ï–ò–ó–í–ï–°–¢–ù–û–ì–û –°–û–¢–†–£–î–ù–ò–ö–ê:\n`;
    context += `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º/–Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ\n`;
    context += `‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö\n`;
    context += `‚Ä¢ –ü–æ–∫–∞–∂–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∑–∞–¥–∞—á–∏ –∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n`;
    context += `‚Ä¢ –ü–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞\n\n`;
  } else if (processedData.summary.queryStrategy === '–í–°–ï_–î–ê–ù–ù–´–ï_–í–°–ï–•_–°–û–¢–†–£–î–ù–ò–ö–û–í') {
    context += `üîç –û–°–û–ë–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –í–°–ï–• –°–û–¢–†–£–î–ù–ò–ö–û–í:\n`;
    context += `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏–ª–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n`;
    context += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n`;
    context += `‚Ä¢ –ü–æ–∫–∞–∂–∏ –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n`;
    context += `‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–æ–≥–∏—á–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ\n\n`;
  }

  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  context += `üìä –î–û–°–¢–£–ü–ù–´–ï –î–ê–ù–ù–´–ï:\n`;
  context += `‚Ä¢ –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${processedData.summary.totalUsers}\n`;
  context += `‚Ä¢ –ó–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${processedData.summary.totalTasks}\n`;
  context += `‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${processedData.summary.totalTimeEntries}\n`;
  context += `‚Ä¢ –ü—Ä–æ–µ–∫—Ç–æ–≤: ${processedData.summary.totalProjects}\n\n`;

  // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
  const prioritizedData = prioritizeDataByQuery(userQuery, processedData);
  context += formatPrioritizedEmployeeData(prioritizedData);

  // –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  context += `\nüìã –ê–õ–ì–û–†–ò–¢–ú –û–¢–í–ï–¢–ê:\n`;
  context += `1Ô∏è‚É£ –ö–†–ê–¢–ö–û: –ì–ª–∞–≤–Ω—ã–π –≤—ã–≤–æ–¥ –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö\n`;
  context += `2Ô∏è‚É£ –î–ï–¢–ê–õ–ò: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã\n`;
  context += `3Ô∏è‚É£ –ò–ù–°–ê–ô–¢–´: –ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã\n`;
  context += `4Ô∏è‚É£ –î–ï–ô–°–¢–í–ò–Ø: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n`;

  // –ü—Ä–∏–º–µ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  context += `‚ú® –ü–†–ò–ú–ï–†–´ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:\n`;
  context += `‚Ä¢ –í–º–µ—Å—Ç–æ "–í—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ" ‚Üí "–ó–∞ –Ω–µ–¥–µ–ª—é –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∞ 120 —á–∞—Å–æ–≤, —á—Ç–æ –Ω–∞ 15% –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏"\n`;
  context += `‚Ä¢ –í–º–µ—Å—Ç–æ "–ó–∞–¥–∞—á –º–Ω–æ–≥–æ" ‚Üí "–£ –ò–≤–∞–Ω–æ–≤–∞ 8 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á, 2 –∏–∑ –Ω–∏—Ö –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã –Ω–∞ 3 –¥–Ω—è"\n`;
  context += `‚Ä¢ –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏\n\n`;

  // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É
  context += `‚öôÔ∏è –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:\n`;
  context += `‚Ä¢ HTML —Ç–µ–≥–∏: —Ç–æ–ª—å–∫–æ <b>, <i>, <code>, <pre>\n`;
  context += `‚Ä¢ –°–ø–∏—Å–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã ‚Ä¢ –∏ —Ü–∏—Ñ—Ä—ã, –ù–ï <ul>/<li>\n`;
  context += `‚Ä¢ –î–ª–∏–Ω–∞: –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤\n`;
  context += `‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí –∞–Ω–∞–ª–∏–∑ ‚Üí –≤—ã–≤–æ–¥—ã ‚Üí —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n`;

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ–∫—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
  if (prioritizedData.focus === 'time' && processedData.recentActivity.length > 0) {
    context += `‚è∞ –ü–û–°–õ–ï–î–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ (${Math.min(processedData.recentActivity.length, 15)} –∑–∞–ø–∏—Å–µ–π):\n`;
    processedData.recentActivity.slice(0, 15).forEach((activity: any, index: number) => {
      context += `${index + 1}. ${activity.date}: ${activity.employee} - ${activity.task} (${activity.hours}—á)\n`;
      if (activity.description && activity.description !== activity.task) {
        context += `   ${activity.description}\n`;
      }
    });
    context += `\n`;
  }

  if (prioritizedData.focus === 'tasks' && processedData.topTasks.length > 0) {
    context += `üî• –¢–û–ü –ó–ê–î–ê–ß –ü–û –í–†–ï–ú–ï–ù–ò (${Math.min(processedData.topTasks.length, 10)} –∑–∞–¥–∞—á):\n`;
    processedData.topTasks.slice(0, 10).forEach((task: any, index: number) => {
      context += `${index + 1}. ${task.title} - ${task.hours.toFixed(1)}—á (${task.employee})\n`;
    });
    context += `\n`;
  }

  // –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è LLM
  context += `\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:\n`;

  if (processedData.summary.queryStrategy === '–í–°–ï_–î–ê–ù–ù–´–ï_–°–û–¢–†–£–î–ù–ò–ö–ê') {
    context += `‚Ä¢ –°–¢–†–ê–¢–ï–ì–ò–Ø: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –¥–∞–Ω–Ω—ã–µ, –Ω–æ –æ—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å\n`;
    context += `‚Ä¢ –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è - —Ñ–∏–ª—å—Ç—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É –≤—Ä–µ–º–µ–Ω–∏\n`;
    context += `‚Ä¢ –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ–±—â–∏–π –ø—Ä–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n`;
  } else if (processedData.summary.queryStrategy === '–ü–û–ò–°–ö_–ù–ï–ò–ó–í–ï–°–¢–ù–û–ì–û_–°–û–¢–†–£–î–ù–ò–ö–ê') {
    context += `‚Ä¢ –°–¢–†–ê–¢–ï–ì–ò–Ø: –ü–æ–∏—Å–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–º–æ–≥–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å\n`;
    context += `‚Ä¢ –ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ\n`;
  } else if (processedData.summary.queryStrategy === '–í–°–ï_–î–ê–ù–ù–´–ï_–í–°–ï–•_–°–û–¢–†–£–î–ù–ò–ö–û–í') {
    context += `‚Ä¢ –°–¢–†–ê–¢–ï–ì–ò–Ø: –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã\n`;
    context += `‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä—É–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥–µ\n`;
  } else {
    context += `‚Ä¢ –°–¢–†–ê–¢–ï–ì–ò–Ø: –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ - –¥–∞–Ω–Ω—ã–µ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É: ${processedData.summary.dateRange}\n`;
  }

  context += `‚Ä¢ –°–ª–µ–¥—É–π 4-—à–∞–≥–æ–≤–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É –æ—Ç–≤–µ—Ç–∞ –≤—ã—à–µ\n`;
  context += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü\n`;
  context += `‚Ä¢ –°–æ–±–ª—é–¥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É\n`;
  context += `‚Ä¢ –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n`;

  return context;
}

/**
 * –û—á–∏—â–∞–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram HTML —Ç–µ–≥–∏
 */
function cleanUnsupportedHtmlTags(text: string): string {
  let cleaned = text;

  // –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  cleaned = cleaned.replace(/<ul>/g, '');
  cleaned = cleaned.replace(/<\/ul>/g, '');
  cleaned = cleaned.replace(/<ol>/g, '');
  cleaned = cleaned.replace(/<\/ol>/g, '');
  cleaned = cleaned.replace(/<li>/g, '‚Ä¢ ');
  cleaned = cleaned.replace(/<\/li>/g, '\n');

  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  cleaned = cleaned.replace(/\n\n\n+/g, '\n\n');

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
  if (cleaned.length > 4000) {
    cleaned = cleaned.substring(0, 3950) + '...\n\n<i>–û—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω</i>';
  }

  return cleaned.trim();
}
