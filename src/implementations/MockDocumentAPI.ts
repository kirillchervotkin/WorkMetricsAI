import {
  IDocumentAPI,
  ILegacyDocumentAPI,
  User,
  Task,
  TimeEntry,
  Project,
  WorkType,
  APIResponse,
  IUser,
  ITask,
  IProject,
  IWorkType,
  IUserStuffTime,
  IAuthRequest,
  IAuthResponse,
  IAddStuffTimeRequest,
  IStuffTimeParams
} from "../interfaces/IDocumentAPI";

export class MockDocumentAPI implements ILegacyDocumentAPI {
  private users: IUser[] = [
    { userName: "–ó–æ–ª–æ—Ç–∞—Ä–µ–≤ –°–µ—Ä–≥–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", userId: "5d99b0f7-6675-11ee-b922-b52194aab495" },
    { userName: "–ß–µ—Ä–≤–æ—Ç–∫–∏–Ω –ö–∏—Ä–∏–ª–ª –°–µ—Ä–≥–µ–µ–≤–∏—á", userId: "7d44b0f7-3313-11ee-b922-b52194aab947" },
    { userName: "–ê—Ä—Ç–µ–º–æ–≤ –ê—Ä—Ç–µ–º –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á", userId: "8e55c1f8-4424-22ff-c933-c63295bbc058" },
    { userName: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞ –¢–µ—Å—Ç–æ–≤–∞", userId: "9f66d2f9-5535-33gg-d044-d74306ccd169" },
    { userName: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á", userId: "0a77e3fa-6646-44hh-e155-e85417dde270" },
    { userName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á", userId: "1b88f4fb-7757-55ii-f266-f96528eef381" },
    { userName: "–ê–ª–µ–∫—Å–µ–µ–≤ –ê–ª–µ–∫—Å–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á", userId: "2c99g5gc-8868-66jj-g377-ga7639ffg492" },
    { userName: "–ê–Ω–¥—Ä–µ–µ–≤ –ê–Ω–¥—Ä–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á", userId: "3daa06hd-9979-77kk-h488-hb8740ggh5a3" },
    { userName: "–ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", userId: "4ebb17ie-aa8a-88ll-i599-ic9851hhi6b4" },
    { userName: "–ê–Ω—Ç–æ–Ω–æ–≤ –ê–Ω—Ç–æ–Ω –î–º–∏—Ç—Ä–∏–µ–≤–∏—á", userId: "5fcc28jf-bb9b-99mm-j6aa-jda962iij7c5" },
    { userName: "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤ –í–ª–∞–¥–∏–º–∏—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", userId: "6gdd39kg-ccac-aann-k7bb-keb073jjk8d6" },
    { userName: "–î–º–∏—Ç—Ä–∏–µ–≤ –î–º–∏—Ç—Ä–∏–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á", userId: "7hee4alh-ddbd-bboo-l8cc-lfc184kkl9e7" },
    { userName: "–ï–≤–≥–µ–Ω—å–µ–≤ –ï–≤–≥–µ–Ω–∏–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á", userId: "8iff5bmi-eece-ccpp-m9dd-mgd295llmaf8" },
    { userName: "–ï–ª–µ–Ω–∞ –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", userId: "9jgg6cnj-ffdf-ddqq-naee-nhe3a6mmnbg9" },
    { userName: "–ö–∏—Ä–∏–ª–ª–æ–≤ –ö–∏—Ä–∏–ª–ª –ï–≤–≥–µ–Ω—å–µ–≤–∏—á", userId: "akhhd7ok-ggeg-eerr-obff-oif4b7nnocah" },
    { userName: "–ú–∞–∫—Å–∏–º–æ–≤ –ú–∞–∫—Å–∏–º –ö–∏—Ä–∏–ª–ª–æ–≤–∏—á", userId: "blii8epl-hhfh-ffss-pcgg-pjg5c8oopdbi" },
    { userName: "–ú–∏—Ö–∞–π–ª–æ–≤ –ú–∏—Ö–∞–∏–ª –ú–∞–∫—Å–∏–º–æ–≤–∏—á", userId: "cmjj9fqm-iigi-ggtt-qdhh-qkh6d9ppqecj" },
    { userName: "–ù–∞—Ç–∞–ª—å—è –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞ –ö–æ–∑–ª–æ–≤–∞", userId: "dnkka0grn-jjhj-hhuu-reii-rli7eaqqrfdk" },
    { userName: "–ù–∏–∫–æ–ª–∞–µ–≤ –ù–∏–∫–æ–ª–∞–π –ù–∞—Ç–∞–ª—å–µ–≤–∏—á", userId: "eollb1hso-kkik-iivv-sfjj-smj8fbrrsgel" },
    { userName: "–û–ª—å–≥–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞", userId: "fpmmcit2p-lljl-jjww-tgkk-tnk9gcssthfm" },
    { userName: "–ü–∞–≤–ª–æ–≤ –ü–∞–≤–µ–ª –û–ª—å–≥–æ–≤–∏—á", userId: "gqnndju3q-mmkm-kkxx-uhll-uol0hdttugn" },
    { userName: "–°–µ—Ä–≥–µ–µ–≤ –°–µ—Ä–≥–µ–π –ü–∞–≤–ª–æ–≤–∏—á", userId: "hrooekvr4-nnln-llyy-vimm-vpm1ieuuvho" },
    { userName: "–¢–∞—Ç—å—è–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞ –í–æ–ª–∫–æ–≤–∞", userId: "ispplws5s-oomm-mmzz-wjnn-wqn2jfvvwip" }
  ];

  private projects: IProject[] = [
    { name: "–ê–π–¢–∏ –ü–ª–∞–Ω - –ü–æ–¥–±–æ—Ä –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∞", id: "745bb100-bedf-11ef-b92a-f86c91893b43" },
    { name: "–ê–π–¢–∏ –ü–ª–∞–Ω - –†–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤", id: "fed7b717-7cc6-11ef-b929-d4b632d8a8a3" },
    { name: "–ê–°–ö–û–ù–ê –¢–î (–ê—Å–∫–æ–Ω–∞ –•–æ—É–º)", id: "967dd322-daeb-33ab-da4c-ba8e05ccb665" },
    { name: "WorkMetricsAI - Telegram Bot –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞", id: "856cc211-cfea-22fa-c93b-a97d94bba554" },
    { name: "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏", id: "a78ee433-ebfc-44bc-eb5d-cb9f16ddc776" },
    { name: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤", id: "b89ff544-fcad-55cd-fc6e-dc0a27eee887" },
    { name: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º", id: "c9a006655-adbe-66de-ad7f-ed1b38fff998" },
    { name: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", id: "da1117766-becf-77ef-be80-fe2c49000aa9" }
  ];

  private workTypes: IWorkType[] = [
    { name: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", id: "457a0f87-5250-11ea-a99d-005056905560" },
    { name: "–ê–Ω–∞–ª–∏–∑/–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", id: "7f030f0a-524c-11ea-a99d-005056905560" },
    { name: "–í—Å—Ç—Ä–µ—á–∞", id: "a35f1699-642a-11ea-a9a1-005056905560" },
    { name: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", id: "b46f2700-753b-22eb-ba02-006067906671" },
    { name: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", id: "c57f3811-864c-33fc-cb13-117178a17782" },
    { name: "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", id: "d68f4922-975d-44ad-dc24-228289b28893" }
  ];

  private tasks: ITask[] = [
    {
      name: "–ê–π–¢–∏ –ü–ª–∞–Ω - –†–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ - –û—Å–≤–æ–µ–Ω–∏–µ GIT",
      id: "df82c5fd-7cc7-11ef-b929-d4b632d8a8a3",
      deadline: "20241227235959"
    },
    {
      name: "–ê–°–ö–û–ù–ê –¢–î (–ê—Å–∫–æ–Ω–∞ –•–æ—É–º) - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö",
      id: "fa052f4e-a645-11ef-b929-d4b632d8a8a3",
      deadline: "20241215235959"
    },
    {
      name: "–ê–π–¢–∏ –ü–ª–∞–Ω - –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏",
      id: "745bb100-bedf-11ef-b92a-f86c91893b43",
      deadline: "20241221235959"
    },
    {
      name: "WorkMetricsAI - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞",
      id: "ef93d6fe-8dd8-22fa-ca3a-e5c743e9b4b4",
      deadline: "20250115235959"
    },
    {
      name: "WorkMetricsAI - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Gemini API",
      id: "0b14e5ff-9ee9-33ab-db4b-f6d854fac5c5",
      deadline: "20250110235959"
    },
    {
      name: "WorkMetricsAI - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞",
      id: "1c25f600-aff0-44bc-ec5c-g7e965gad6d6",
      deadline: "20250105235959"
    },
    {
      name: "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π",
      id: "2d36g711-b001-55cd-fd6d-h8fa76hbe7e7",
      deadline: "20250120235959"
    },
    {
      name: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ - –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
      id: "3e47h822-c112-66de-ge7e-i90b87icf8f8",
      deadline: "20250125235959"
    },
    {
      name: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API",
      id: "4f58i933-d223-77ef-hf8f-ja1c98jdg9g9",
      deadline: "20250130235959"
    },
    {
      name: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π - UI/UX –¥–∏–∑–∞–π–Ω",
      id: "5069ja44-e334-88f0-ig90-kb2da9keh0ha",
      deadline: "20250201235959"
    }
  ];

  async authenticate(request: IAuthRequest): Promise<IAuthResponse> {
    await this.delay(200);

    console.log("üîê Mock: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", request.userName);

    if (request.userName && request.passHash) {
      return {
        userName: request.userName,
        fullUserName: `${request.userName} (–ü–æ–ª–Ω–æ–µ –∏–º—è)`,
        userId: "mock-user-id-" + Date.now(),
        permission: "mock-permission-id"
      };
    }
    
    throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
  }

  async getUserByLogin(login: string): Promise<IUser | null> {
    await this.delay(150);
    console.log("üë§ Mock: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É", login);

    return {
      login: login,
      userName: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –ª–æ–≥–∏–Ω—É " + login,
      userId: "mock-login-user-" + login.replace('@', '')
    } as any;
  }

  async getUsersByNames(names: string): Promise<IUser[]> {
    await this.delay(200);
    console.log("üë• Mock: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∞–º", names);
    
    const searchNames = names.toLowerCase().split(',').map(n => n.trim());
    const foundUsers = this.users.filter(user => 
      searchNames.some(searchName => 
        user.userName.toLowerCase().includes(searchName)
      )
    );
    
    return foundUsers;
  }

  async getTaskByName(userId: string, taskName: string): Promise<ITask | null> {
    await this.delay(150);
    console.log("üìã Mock: –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", { userId, taskName });
    
    const task = this.tasks.find(t => 
      t.name.toLowerCase().includes(taskName.toLowerCase())
    );
    
    return task || null;
  }

  async getTasksByUserId(userId: string): Promise<ITask[]> {
    await this.delay(200);
    console.log("üìã Mock: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", userId);

    const userTasks = this.tasks.slice(0, 3);
    return userTasks;
  }

  async getProjectByName(projectName: string): Promise<IProject | null> {
    await this.delay(150);
    console.log("üèóÔ∏è Mock: –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", projectName);
    
    const project = this.projects.find(p => 
      p.name.toLowerCase().includes(projectName.toLowerCase())
    );
    
    return project || null;
  }

  async getProjectTaskByName(projectTaskName: string): Promise<ITask | null> {
    await this.delay(150);
    console.log("üèóÔ∏èüìã Mock: –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏", projectTaskName);
    
    const task = this.tasks.find(t => 
      t.name.toLowerCase().includes(projectTaskName.toLowerCase())
    );
    
    return task || null;
  }

  async getWorkTypes(): Promise<IWorkType[]> {
    await this.delay(100);
    console.log("‚öôÔ∏è Mock: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç");

    return this.workTypes;
  }

  async getStuffTime(params: IStuffTimeParams): Promise<IUserStuffTime[]> {
    await this.delay(300);
    console.log("‚è±Ô∏è Mock: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç", params);

    const allTimeData: IUserStuffTime[] = [
      {
        user: "–ó–æ–ª–æ—Ç–∞—Ä–µ–≤ –°–µ—Ä–≥–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
        countOfMinutes: 330,
        stufftime: [
          {
            description: "–°–æ–∑–≤–æ–Ω —Å –ö–∏—Ä–∏–ª–ª–æ–º –∏ –ù–∞—Ç–∞–ª–∏–µ–π. –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é –Ø–Ω–¥–µ–∫—Å —Å—Ç–∞–Ω—Ü–∏–∏ —Å –î–û",
            countOfMinutes: 150
          },
          {
            description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ http-—Å–µ—Ä–≤–∏—Å–∞ –≤ –±–∞–∑–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –î–û –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ API —Å –Ω–∞–≤—ã–∫–æ–º –Ø–Ω–¥–µ–∫—Å —Å—Ç–∞–Ω—Ü–∏–∏.",
            countOfMinutes: 180
          }
        ]
      },
      {
        user: "–ß–µ—Ä–≤–æ—Ç–∫–∏–Ω –ö–∏—Ä–∏–ª–ª –°–µ—Ä–≥–µ–µ–≤–∏—á",
        countOfMinutes: 300,
        stufftime: [
          {
            description: "–û–±—â–µ–Ω–∏–µ —Å –°–µ—Ä–≥–µ–µ–º –ø–æ –∑–∞–¥–∞—á–µ",
            countOfMinutes: 60
          },
          {
            description: "–î–æ—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞. ( –°–¥–µ–ª–∞–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ http –∑–∞–ø—Ä–æ—Å–æ–≤)",
            countOfMinutes: 120
          },
          {
            description: "–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–£–ø–∞–∫–æ–≤–∫–∞ –≤ –¥–æ–∫–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∑–∞–ø—É—Å–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞)",
            countOfMinutes: 120
          }
        ]
      },
      {
        user: "–ê—Ä—Ç–µ–º–æ–≤ –ê—Ä—Ç–µ–º –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á",
        countOfMinutes: 480,
        stufftime: [
          {
            description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Gemini AI",
            countOfMinutes: 240
          },
          {
            description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ IoC –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ mock —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ API",
            countOfMinutes: 120
          },
          {
            description: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenRouter –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Gemini 2.5 Flash Lite",
            countOfMinutes: 120
          }
        ]
      },
      {
        user: "–ú–∞—Ä–∏—è –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫",
        countOfMinutes: 300,
        stufftime: [
          {
            description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Telegram-–±–æ—Ç–∞",
            countOfMinutes: 180
          },
          {
            description: "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –¥–ª—è API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
            countOfMinutes: 120
          }
        ]
      },
      {
        user: "–ò–≤–∞–Ω –ê–Ω–∞–ª–∏—Ç–∏–∫",
        countOfMinutes: 240,
        stufftime: [
          {
            description: "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Å–∏—Å—Ç–µ–º–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞",
            countOfMinutes: 120
          },
          {
            description: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
            countOfMinutes: 120
          }
        ]
      }
    ];

    if (params.userId) {
      console.log("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ userId:", params.userId);

      const userIds = params.userId.split(',');
      const filteredData: IUserStuffTime[] = [];

      for (const userId of userIds) {
        const user = this.users.find(u => u.userId === userId.trim());
        if (user) {
          console.log("üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user.userName);

          const userData = allTimeData.find(data =>
            data.user.includes(user.userName.split(' ')[0]) ||
            data.user === user.userName
          );

          if (userData) {
            console.log("‚è±Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –¥–ª—è:", userData.user);
            filteredData.push(userData);
          } else {
            console.log("‚ùå –¢—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è:", user.userName);
          }
        } else {
          console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID:", userId);
        }
      }

      return filteredData;
    }

    console.log("üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã");
    return allTimeData;
  }

  async addStuffTime(request: IAddStuffTimeRequest): Promise<{ success?: string; error?: string }> {
    await this.delay(250);
    console.log("‚ûï Mock: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç", request);

    return {
      success: "–ó–∞–ø–∏—Å—å –æ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–∞—Ö —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (Mock)"
    };
  }

  async checkOverdueTasks(userId: string): Promise<{ result: boolean }> {
    await this.delay(100);
    console.log("‚ö†Ô∏è Mock: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á", userId);

    return {
      result: Math.random() > 0.5
    };
  }


  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}
