import axios, { AxiosInstance, AxiosResponse } from "axios";
import https from "https";
import { config } from "../config";
import {
  IDocumentAPI,
  User,
  Task,
  TimeEntry,
  Project,
  WorkType,
  APIResponse
} from "../interfaces/IDocumentAPI";

export class RealDocumentAPI implements IDocumentAPI {
  private client: AxiosInstance;

  constructor() {
    const username = config.DO_API_USERNAME;
    const password = config.DO_API_PASSWORD;

    // –°–æ–∑–¥–∞–µ–º Basic Auth —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
    const credentials = `${username}:${password}`;
    const basicAuth = Buffer.from(credentials, 'utf8').toString('base64');

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const alternativeAuth = Buffer.from(encodeURIComponent(credentials), 'utf8').toString('base64');

    console.log('üîê Auth Debug:');
    console.log('Username:', username);
    console.log('Password length:', password.length);
    console.log('Credentials string length:', credentials.length);
    console.log('Basic Auth (Buffer):', basicAuth);
    console.log('Basic Auth (Alternative):', alternativeAuth);
    console.log('Expected from docs:', 'ZXhjaGFuZ2VfYXBpX3VzZXI6ZUBDTXc5JVEkb3FHVmRzRXt3');
    console.log('Match with expected:', basicAuth === 'ZXhjaGFuZ2VfYXBpX3VzZXI6ZUBDTXc5JVEkb3FHVmRzRXt3');

    this.client = axios.create({
      baseURL: config.DO_API_URL,
      headers: {
        "Authorization": `Basic ${basicAuth}`,
        "Content-Type": "application/json",
        "Accept": "application/json",
        "User-Agent": "WorkMetricsAI-Bot/1.0"
      },
      timeout: 15000,
      httpsAgent: new https.Agent({
        rejectUnauthorized: false
      })
    });

    console.log('üåê Real DocumentAPI initialized with Basic Auth');
  }

  async getUsersByNames(params: { names: string[] }): Promise<APIResponse<User[]>> {
    try {
      console.log(`üîç Real API: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∞–º ${params.names.join(', ')}`);

      // –ü—Ä–æ–±—É–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑-–∑–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      let response: AxiosResponse;
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º 'users' –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        response = await this.client.get('/users', {
          params: {
            users: params.names.join(',')
          }
        });
      } catch (error: any) {
        if (error.response?.status === 400) {
          console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä userId –≤–º–µ—Å—Ç–æ users');
          // –ü—Ä–æ–±—É–µ–º 'userId' –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
          response = await this.client.get('/users', {
            params: {
              userId: params.names.join(',')
            }
          });
        } else {
          throw error;
        }
      }

      if (response.status === 200 && response.data) {
        const users: User[] = Array.isArray(response.data) ? response.data.map((user: any) => ({
          userName: user.userName || user.name || user.fullName,
          userId: user.userId || user.id || user.guid
        })) : [];

        console.log(`‚úÖ Real API: –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
        return {
          success: true,
          data: users,
          message: `–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`
        };
      }

      return {
        success: false,
        data: [],
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      };

    } catch (error: any) {
      console.error('‚ùå Real API Error (getUsersByNames):', error.message);
      return {
        success: false,
        data: [],
        message: `–û—à–∏–±–∫–∞ API: ${error.message}`,
        error: error.response?.data || error.message
      };
    }
  }

  async getAllUsers(): Promise<APIResponse<User[]>> {
    try {
      console.log('üîç Real API: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é /stufftime + /users');

      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–∑ /stufftime
      const stufftimeResponse = await this.client.get('/stufftime');

      if (stufftimeResponse.status !== 200 || !Array.isArray(stufftimeResponse.data)) {
        return {
          success: false,
          data: [],
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç'
        };
      }

      console.log(`üîç Real API: –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π stufftime: ${stufftimeResponse.data.length}`);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const uniqueNames = new Set<string>();
      stufftimeResponse.data.forEach((entry: any) => {
        if (entry.user && typeof entry.user === 'string') {
          uniqueNames.add(entry.user.trim());
        }
      });

      console.log(`üîç Real API: –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω: ${uniqueNames.size}`);

      // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID —á–µ—Ä–µ–∑ /users –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–º–µ–Ω–∏
      const users: User[] = [];
      const nameArray = Array.from(uniqueNames);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ –±–∞—Ç—á–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ API
      for (const fullName of nameArray.slice(0, 10)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 10 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try {
          // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏
          const userResponse = await this.client.get('/users', {
            params: { users: fullName }
          });

          if (userResponse.status === 200 && userResponse.data && userResponse.data.length > 0) {
            const userData = userResponse.data[0];
            users.push({
              userName: userData.userName || fullName,
              userId: userData.userId
            });
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${fullName} ‚Üí ${userData.userId}`);
          } else {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏, –ø—Ä–æ–±—É–µ–º –ø–æ —Ñ–∞–º–∏–ª–∏–∏
            const lastName = fullName.split(' ')[0];
            try {
              const lastNameResponse = await this.client.get('/users', {
                params: { users: lastName }
              });

              if (lastNameResponse.status === 200 && lastNameResponse.data && lastNameResponse.data.length > 0) {
                const userData = lastNameResponse.data[0];
                users.push({
                  userName: userData.userName || fullName,
                  userId: userData.userId
                });
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ñ–∞–º–∏–ª–∏–∏: ${lastName} ‚Üí ${userData.userName} (${userData.userId})`);
              } else {
                console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ /users: ${fullName}`);
                // –î–æ–±–∞–≤–ª—è–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID
                users.push({
                  userName: fullName,
                  userId: `temp_${users.length + 1}`
                });
              }
            } catch (lastNameError) {
              console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ ${lastName}:`, lastNameError);
              users.push({
                userName: fullName,
                userId: `temp_${users.length + 1}`
              });
            }
          }
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${fullName}:`, error);
          // –î–æ–±–∞–≤–ª—è–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID
          users.push({
            userName: fullName,
            userId: `temp_${users.length + 1}`
          });
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 200));
      }

      console.log(`‚úÖ Real API: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
      console.log('üîç –ü–µ—Ä–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users.slice(0, 3));

      return {
        success: true,
        data: users,
        message: `–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`
      };

    } catch (error: any) {
      console.error('‚ùå Real API Error (getAllUsers):', error.message);
      return {
        success: false,
        data: [],
        message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`,
        error: error.response?.data || error.message
      };
    }
  }

  async getEmployeeTasks(params: { employee_name?: string; userId?: string; limit?: number }): Promise<APIResponse<Task[]>> {
    try {
      const userId = params.userId;
      console.log(`üìã Real API: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è userId: ${userId}`);

      if (!userId) {
        console.log(`‚ùå Real API: userId –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á`);
        return {
          success: false,
          data: [],
          message: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á'
        };
      }

      const response: AxiosResponse = await this.client.get('/tasks', {
        params: {
          userId: userId,
          limit: params.limit || 50
        }
      });

      if (response.status === 200 && response.data) {
        const rawTasks = Array.isArray(response.data) ? response.data : [];

        console.log(`üîç Real API: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ getEmployeeTasks:`, rawTasks[0] ? JSON.stringify(rawTasks[0], null, 2) : '–ù–µ—Ç –∑–∞–¥–∞—á');
        console.log(`üîç Real API: –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${rawTasks.length}`);

        const tasks: Task[] = rawTasks.map((task: any) => ({
          id: task.id || task.taskId || task.guid,
          title: task.title || task.name || task.description,
          description: task.description || task.title || '',
          date: task.date || task.deadline || task.dueDate,
          status: task.status || 'active',
          hours: task.hours || task.plannedHours || 0
        }));

        console.log(`‚úÖ Real API: –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.length}`);
        return {
          success: true,
          data: tasks,
          message: `–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.length}`
        };
      }

      return {
        success: false,
        data: [],
        message: '–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      };

    } catch (error: any) {
      console.error('‚ùå Real API Error (getEmployeeTasks):', error.message);
      return {
        success: false,
        data: [],
        message: `–û—à–∏–±–∫–∞ API: ${error.message}`,
        error: error.response?.data || error.message
      };
    }
  }

  async getTimeEntries(params: {
    employee_name?: string;
    userId?: string;
    startDate?: string;
    endDate?: string;
    limit?: number
  }): Promise<APIResponse<TimeEntry[]>> {
    try {
      const userId = params.userId;
      console.log(`‚è±Ô∏è Real API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç –¥–ª—è userId: ${userId}`);

      if (!userId) {
        console.log(`‚ùå Real API: userId –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç`);
        return {
          success: false,
          data: [],
          message: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç'
        };
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç API (YYYYMMDDHHMMSS)
      let fromParam, toParam;
      if (params.startDate) {
        fromParam = params.startDate.replace(/-/g, '') + '000000';
      }
      if (params.endDate) {
        toParam = params.endDate.replace(/-/g, '') + '235959';
      }

      console.log(`‚è±Ô∏è Real API: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:`, {
        userId,
        from: fromParam,
        to: toParam,
        limit: params.limit || 100
      });

      const response: AxiosResponse = await this.client.get('/stufftime', {
        params: {
          userId: userId,
          from: fromParam,
          to: toParam,
          limit: params.limit || 100
        }
      });

      if (response.status === 200 && response.data) {
        const timeEntries: TimeEntry[] = Array.isArray(response.data) ? response.data.map((entry: any) => ({
          id: entry.id || entry.guid,
          userId: entry.userId || userId,
          description: entry.description || entry.comment || entry.workDescription,
          countOfMinutes: entry.countOfMinutes || entry.minutes || (entry.hours ? entry.hours * 60 : 0),
          date: entry.date || entry.workDate || entry.created,
          taskId: entry.taskId || entry.task?.id,
          projectId: entry.projectId || entry.project?.id,
          workTypeId: entry.workTypeId || entry.workType?.id
        })) : [];

        console.log(`‚úÖ Real API: –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏: ${timeEntries.length}`);
        return {
          success: true,
          data: timeEntries,
          message: `–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏: ${timeEntries.length}`
        };
      }

      return {
        success: false,
        data: [],
        message: '–ó–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      };

    } catch (error: any) {
      console.error('‚ùå Real API Error (getTimeEntries):', error.message);
      return {
        success: false,
        data: [],
        message: `–û—à–∏–±–∫–∞ API: ${error.message}`,
        error: error.response?.data || error.message
      };
    }
  }

  async getProjects(params: { name?: string; limit?: number }): Promise<APIResponse<Project[]>> {
    try {
      console.log(`üèóÔ∏è Real API: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ ${params.name ? `–ø–æ –∏–º–µ–Ω–∏: ${params.name}` : ''}`);

      // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, projectName –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
      const projectName = params.name || '–ê–π–¢–∏ –ü–ª–∞–Ω';

      const response: AxiosResponse = await this.client.get('/project', {
        params: {
          projectName: projectName
        }
      });

      if (response.status === 200 && response.data) {
        const projects: Project[] = Array.isArray(response.data) ? response.data.map((project: any) => ({
          id: project.id || project.projectId || project.guid,
          name: project.name || project.title || project.projectName
        })) : [];

        console.log(`‚úÖ Real API: –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
        return {
          success: true,
          data: projects,
          message: `–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`
        };
      }

      return {
        success: false,
        data: [],
        message: '–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      };

    } catch (error: any) {
      console.error('‚ùå Real API Error (getProjects):', error.message);
      return {
        success: false,
        data: [],
        message: `–û—à–∏–±–∫–∞ API: ${error.message}`,
        error: error.response?.data || error.message
      };
    }
  }

  async getWorkTypes(): Promise<APIResponse<WorkType[]>> {
    try {
      console.log('üîß Real API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç');

      const response: AxiosResponse = await this.client.get('/worktypes');

      if (response.status === 200 && response.data) {
        const workTypes: WorkType[] = Array.isArray(response.data) ? response.data.map((workType: any) => ({
          id: workType.id || workType.workTypeId || workType.guid,
          name: workType.name || workType.title || workType.workTypeName
        })) : [];

        console.log(`‚úÖ Real API: –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç: ${workTypes.length}`);
        return {
          success: true,
          data: workTypes,
          message: `–ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç: ${workTypes.length}`
        };
      }

      return {
        success: false,
        data: [],
        message: '–¢–∏–ø—ã —Ä–∞–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      };

    } catch (error: any) {
      console.error('‚ùå Real API Error (getWorkTypes):', error.message);
      return {
        success: false,
        data: [],
        message: `–û—à–∏–±–∫–∞ API: ${error.message}`,
        error: error.response?.data || error.message
      };
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async testConnection(): Promise<APIResponse<any>> {
    try {
      console.log('üîå Real API: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');

      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
      const response = await this.client.get('/worktypes');

      return {
        success: true,
        data: { status: 'connected', statusCode: response.status },
        message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Real API —É—Å–ø–µ—à–Ω–æ!'
      };

    } catch (error: any) {
      console.error('‚ùå Real API Connection Test Failed:', error.message);
      return {
        success: false,
        data: null,
        message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`,
        error: error.response?.data || error.message
      };
    }
  }
}
