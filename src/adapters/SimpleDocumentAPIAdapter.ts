import { getDocumentAPI } from "../container/DIContainer";
import { ApiResponse, Task, TimeEntry, Project, Employee } from "../types";
import { IDocumentAPI } from "../interfaces/IDocumentAPI";

export class SimpleDocumentAPIAdapter {
  private api: IDocumentAPI;

  constructor() {
    this.api = getDocumentAPI();
  }

  async getWorkTypes() {
    try {
      const response = await this.api.getWorkTypes();
      if (response.success) {
        return response.data;
      } else {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç:", response.message);
        return [];
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç:", error);
      return [];
    }
  }

  async getAllEmployees(): Promise<ApiResponse<Employee[]>> {
    try {
      console.log('üë• –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...');

      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ getAllUsers –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if ('getAllUsers' in this.api && typeof this.api.getAllUsers === 'function') {
        try {
          console.log('üîç –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ getAllUsers...');
          const response = await this.api.getAllUsers();
          if (response.success && response.data.length > 0) {
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ getAllUsers: ${response.data.length}`);
            return this.formatEmployeesResponse(response.data);
          }
        } catch (error) {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ getAllUsers');
        }
      }

      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
      try {
        console.log('üîç –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º...');
        const response = await this.api.getUsersByNames({ names: [""] });
        if (response.success && response.data.length > 0) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º: ${response.data.length}`);
          return this.formatEmployeesResponse(response.data);
        }
      } catch (error) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º');
      }

      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–ø—Ä–æ–±—É–µ–º —Å –æ–±—â–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
      const commonChars = [" ", "*", "%", "–∞", "–µ", "–∏", "–æ", "—É"];
      let allUsers: any[] = [];

      for (const char of commonChars) {
        try {
          console.log(`üîç –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É: "${char}"`);
          const response = await this.api.getUsersByNames({ names: [char] });
          if (response.success && response.data.length > 0) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ "${char}": ${response.data.length}`);
            allUsers.push(...response.data);
            if (allUsers.length >= 100) break; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          }
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ "${char}"`);
          continue;
        }
      }

      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–º–µ–Ω–∞
      if (allUsers.length === 0) {
        const popularNames = [
          "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–ê–ª–µ–∫—Å–µ–π", "–ê–Ω–¥—Ä–µ–π", "–ê–Ω–Ω–∞", "–ê–Ω—Ç–æ–Ω",
          "–í–ª–∞–¥–∏–º–∏—Ä", "–î–º–∏—Ç—Ä–∏–π", "–ï–≤–≥–µ–Ω–∏–π", "–ï–ª–µ–Ω–∞", "–ò–≤–∞–Ω",
          "–ö–∏—Ä–∏–ª–ª", "–ú–∞–∫—Å–∏–º", "–ú–∞—Ä–∏—è", "–ú–∏—Ö–∞–∏–ª", "–ù–∞—Ç–∞–ª—å—è",
          "–ù–∏–∫–æ–ª–∞–π", "–û–ª—å–≥–∞", "–ü–∞–≤–µ–ª", "–°–µ—Ä–≥–µ–π", "–¢–∞—Ç—å—è–Ω–∞"
        ];

        for (const name of popularNames) {
          try {
            console.log(`üîç –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏: ${name}`);
            const response = await this.api.getUsersByNames({ names: [name] });
            if (response.success && response.data.length > 0) {
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ "${name}": ${response.data.length}`);
              allUsers.push(...response.data);
              if (allUsers.length >= 50) break;
            }
          } catch (error) {
            continue;
          }
        }
      }

      if (allUsers.length > 0) {
        const result = this.formatEmployeesResponse(allUsers);

        // –ï—Å–ª–∏ Real API –≤–µ—Ä–Ω—É–ª –º–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ–Ω—å—à–µ 5), –¥–æ–ø–æ–ª–Ω—è–µ–º Mock –¥–∞–Ω–Ω—ã–º–∏
        if (result.data.length < 5) {
          console.log(`‚ö†Ô∏è Real API –≤–µ—Ä–Ω—É–ª —Ç–æ–ª—å–∫–æ ${result.data.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–æ–ø–æ–ª–Ω—è–µ–º Mock –¥–∞–Ω–Ω—ã–º–∏`);

          try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Mock API
            const mockUsers = await this.getMockUsers();

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º Real –∏ Mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            const combinedUsers = [...result.data];
            const existingNames = new Set(result.data.map(u => u.name.toLowerCase()));

            mockUsers.forEach(mockUser => {
              if (!existingNames.has(mockUser.name.toLowerCase())) {
                combinedUsers.push(mockUser);
              }
            });

            console.log(`‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: Real(${result.data.length}) + Mock(${mockUsers.length}) = ${combinedUsers.length}`);

            return {
              success: true,
              data: combinedUsers,
              message: `–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${combinedUsers.length} (Real: ${result.data.length}, Mock: ${mockUsers.length})`
            };
          } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return result; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ Real –¥–∞–Ω–Ω—ã–µ
          }
        }

        return result;
      } else {
        console.log('‚ùå Real API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Mock –¥–∞–Ω–Ω—ã–µ');

        try {
          const mockUsers = await this.getMockUsers();
          return {
            success: true,
            data: mockUsers,
            message: `–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${mockUsers.length} (—Ç–æ–ª—å–∫–æ Mock)`
          };
        } catch (error) {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º');
          return {
            success: false,
            data: [],
            message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ API"
          };
        }
      }
    } catch (error: any) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', error.message);
      return {
        success: false,
        data: [],
        message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${error.message}`
      };
    }
  }

  private formatEmployeesResponse(users: any[]): ApiResponse<Employee[]> {
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ userId
    const uniqueUsers = users.filter((user, index, self) =>
      index === self.findIndex(u => u.userId === user.userId)
    );

    const employees: Employee[] = uniqueUsers.map(user => ({
      id: user.userId,
      name: user.userName,
      email: "",
      position: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
      department: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }));

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}`);
    return {
      success: true,
      data: employees,
      message: `–ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}`
    };
  }

  private async getMockUsers(): Promise<Employee[]> {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Mock API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const mockAPI = new (await import('../implementations/MockDocumentAPINew')).MockDocumentAPINew();
    const mockResponse = await mockAPI.getUsersByNames({ names: [""] });

    if (mockResponse.success) {
      return mockResponse.data.map(user => ({
        id: user.userId,
        name: user.userName,
        email: "",
        position: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
        department: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
      }));
    }

    return [];
  }

  async getEmployeeTasks(params: { employee_name?: string; limit?: number }): Promise<ApiResponse<Task[]>> {
    try {
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –µ–≥–æ —Ç–æ—á–Ω—ã–π ID
      let employeeName = params.employee_name;

      let userId: string | undefined;

      if (employeeName) {
        console.log(`üîç –ò—â–µ–º userId –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: "${employeeName}"`);
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω–∏
        const userResponse = await this.findUserByName(employeeName);
        if (userResponse.success && userResponse.data.length > 0) {
          userId = userResponse.data[0].id;
          employeeName = userResponse.data[0].name;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω userId: ${userId} –¥–ª—è "${employeeName}"`);
        } else {
          console.log(`‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${employeeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return {
            success: false,
            data: [],
            message: `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${employeeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
          };
        }
      }

      console.log(`üìã –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è: "${employeeName}" (userId: ${userId})`);

      const response = await this.api.getEmployeeTasks({
        userId: userId,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º userId –≤–º–µ—Å—Ç–æ employee_name
        limit: params.limit
      });

      console.log(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–¥–∞—á:`, {
        success: response.success,
        dataLength: response.data?.length || 0,
        message: response.message
      });

      if (response.success) {
        const tasks: Task[] = response.data.map(task => ({
          id: task.id,
          title: task.title,
          description: task.description,
          employee_id: "",
          project_id: "",
          hours: task.hours || 0,
          date: task.date,
          status: task.status as any || "pending"
        }));

        return {
          success: true,
          data: tasks,
          message: `–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.length}`
        };
      } else {
        return {
          success: false,
          data: [],
          message: response.message
        };
      }
    } catch (error: any) {
      return {
        success: false,
        data: [],
        message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: ${error.message}`
      };
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
  async findUserByName(searchName: string): Promise<ApiResponse<Employee[]>> {
    try {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
      const searchVariants = [
        searchName, // –ü–æ–ª–Ω–æ–µ –∏–º—è –∫–∞–∫ –µ—Å—Ç—å
        searchName.charAt(0).toUpperCase() + searchName.slice(1).toLowerCase(), // –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è
        searchName.toUpperCase(), // –í—Å–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ
        searchName.toLowerCase(), // –í—Å–µ —Å—Ç—Ä–æ—á–Ω—ã–µ
        searchName.split(' ')[0], // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ (–∏–º—è)
        searchName.split(' ').pop() || searchName // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ (—Ñ–∞–º–∏–ª–∏—è)
      ];

      for (const variant of searchVariants) {
        try {
          const response = await this.api.getUsersByNames({ names: [variant] });
          if (response.success && response.data.length > 0) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            const matchingUsers = response.data.filter(user =>
              user.userName.toLowerCase().includes(searchName.toLowerCase()) ||
              searchName.toLowerCase().includes(user.userName.toLowerCase())
            );

            if (matchingUsers.length > 0) {
              const employees: Employee[] = matchingUsers.map(user => ({
                id: user.userId,
                name: user.userName,
                email: "",
                position: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
                department: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
              }));

              return {
                success: true,
                data: employees,
                message: `–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${employees.length}`
              };
            }
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
          continue;
        }
      }

      return {
        success: false,
        data: [],
        message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${searchName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
      };
    } catch (error: any) {
      return {
        success: false,
        data: [],
        message: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`
      };
    }
  }

  async getTimeEntries(params: {
    employee_name?: string;
    start_date?: string;
    end_date?: string;
    limit?: number
  }): Promise<ApiResponse<TimeEntry[]>> {
    try {
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –Ω–∞–π–¥–µ–º –µ–≥–æ userId
      let employeeName = params.employee_name;
      let userId: string | undefined;

      if (employeeName) {
        console.log(`üîç –ò—â–µ–º userId –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: "${employeeName}"`);
        const userResponse = await this.findUserByName(employeeName);
        if (userResponse.success && userResponse.data.length > 0) {
          userId = userResponse.data[0].id;
          employeeName = userResponse.data[0].name;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω userId: ${userId} –¥–ª—è "${employeeName}"`);
        } else {
          console.log(`‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${employeeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return {
            success: false,
            data: [],
            message: `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${employeeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
          };
        }
      }

      console.log(`‚è±Ô∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –¥–ª—è: "${employeeName}" (userId: ${userId}) —Å ${params.start_date} –ø–æ ${params.end_date}`);

      const response = await this.api.getTimeEntries({
        userId: userId,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º userId –≤–º–µ—Å—Ç–æ employee_name
        startDate: params.start_date,
        endDate: params.end_date,
        limit: params.limit
      });

      console.log(`‚è±Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç:`, {
        success: response.success,
        dataLength: response.data?.length || 0,
        message: response.message
      });

      if (response.success) {
        const timeEntries: TimeEntry[] = response.data.map(entry => ({
          id: entry.id,
          employee_id: entry.userId,
          task_id: entry.taskId || "",
          project_id: entry.projectId || "",
          description: entry.description,
          hours: Math.round(entry.countOfMinutes / 60 * 100) / 100,
          date: entry.date,
          work_type: ""
        }));
        
        return {
          success: true,
          data: timeEntries,
          message: `–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏: ${timeEntries.length}`
        };
      } else {
        return {
          success: false,
          data: [],
          message: response.message
        };
      }
    } catch (error: any) {
      return {
        success: false,
        data: [],
        message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç: ${error.message}`
      };
    }
  }

  async getProjects(params: { name?: string; limit?: number }): Promise<ApiResponse<Project[]>> {
    try {
      const response = await this.api.getProjects({
        name: params.name,
        limit: params.limit
      });
      
      if (response.success) {
        const projects: Project[] = response.data.map(project => ({
          id: project.id,
          name: project.name,
          code: project.id,
          description: project.name,
          status: "active",
          start_date: "",
          end_date: ""
        }));
        
        return {
          success: true,
          data: projects,
          message: `–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`
        };
      } else {
        return {
          success: false,
          data: [],
          message: response.message
        };
      }
    } catch (error: any) {
      return {
        success: false,
        data: [],
        message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: ${error.message}`
      };
    }
  }

  private needsAllEmployees(query?: string): boolean {
    if (!query) return true;

    const queryLower = query.toLowerCase();

    // –ó–∞–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    const listPatterns = [
      '–Ω–∞–∑–æ–≤–∏.*—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–ø–µ—Ä–µ—á–∏—Å–ª–∏.*—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '—Å–ø–∏—Å–æ–∫.*—Å–æ—Ç—Ä—É–¥–Ω–∏–∫',
      '–∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–∫—Ç–æ –µ—Å—Ç—å', '–≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', '–≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
      '—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
    ];

    return listPatterns.some(pattern => new RegExp(pattern).test(queryLower));
  }

  async loadAllData(params: {
    start_date?: string;
    end_date?: string;
    employee_name?: string;
    query?: string;
  } = {}) {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –î–û...');

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è LLM
      const TASK_LIMIT = 50;  // –ú–∞–∫—Å–∏–º—É–º 50 –∑–∞–¥–∞—á
      const TIME_LIMIT = 100; // –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
      const defaultEndDate = new Date().toISOString().split('T')[0];
      const defaultStartDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      let employeesPromise;
      const isListRequest = this.needsAllEmployees(params.query);

      if (params.employee_name && !isListRequest) {
        console.log(`üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ${params.employee_name}`);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employeesPromise = this.findUserByName(params.employee_name).then(result => ({
          success: result.success,
          data: result.data,
          message: result.message
        }));
      } else {
        console.log(`üë• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è ${isListRequest ? '–∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞' : '–æ–±—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞'}`);
        employeesPromise = this.getAllEmployees();
      }

      const [workTypes, employees, tasks, timeEntries, projects] = await Promise.all([
        this.getWorkTypes(),
        employeesPromise,
        this.getEmployeeTasks({
          employee_name: params.employee_name,
          limit: TASK_LIMIT
        }),
        this.getTimeEntries({
          employee_name: params.employee_name,
          start_date: params.start_date || defaultStartDate,
          end_date: params.end_date || defaultEndDate,
          limit: TIME_LIMIT
        }),
        this.getProjects({ limit: 20 })
      ]);

      const result = {
        workTypes,
        users: employees.success ? employees.data : [],
        tasks: tasks.success ? tasks.data : [],
        timeEntries: timeEntries.success ? timeEntries.data : [],
        projects: projects.success ? projects.data : []
      };

      console.log('üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
        users: result.users.length,
        projects: result.projects.length,
        tasks: result.tasks.length,
        timeEntries: result.timeEntries.length
      });

      return result;
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }
}
