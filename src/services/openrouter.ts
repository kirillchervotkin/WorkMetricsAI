import axios, { AxiosInstance } from "axios";
import { config } from "../config";
import { ParsedQuery } from "../types";

export class OpenRouterService {
  private client: AxiosInstance | null = null;
  private parseCache = new Map<string, ParsedQuery>(); // –ö—ç—à –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
  private formatCache = new Map<string, string>(); // –ö—ç—à –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  constructor() {
    if (config.OPENROUTER_API_KEY) {
      this.client = axios.create({
        baseURL: 'https://openrouter.ai/api/v1',
        headers: {
          'Authorization': `Bearer ${config.OPENROUTER_API_KEY}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': 'https://github.com/your-repo', // Optional: for analytics
          'X-Title': 'Telegram Bot Document Management' // Optional: for analytics
        },
        timeout: 30000
      });
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é Gemini —á–µ—Ä–µ–∑ OpenRouter
   */
  async parseQuery(userQuery: string): Promise<ParsedQuery | null> {
    if (!this.client) {
      console.log("OpenRouter API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = userQuery.toLowerCase().trim();
    if (this.parseCache.has(cacheKey)) {
      console.log("üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à –ø–∞—Ä—Å–∏–Ω–≥–∞");
      return this.parseCache.get(cacheKey)!;
    }

    // –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä (—ç–∫–æ–Ω–æ–º–∏–º —Ç–æ–∫–µ–Ω—ã)
    if (this.isSimpleQuery(userQuery)) {
      console.log("‚ö° –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä");
      return null; // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    }

    try {
      const prompt = this.buildParsingPrompt(userQuery);
      
      const response = await this.client.post('/chat/completions', {
        model: 'google/gemini-2.5-flash-lite-preview-06-17',
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        max_tokens: 500
      });

      const content = response.data.choices[0]?.message?.content;
      if (!content) {
        console.error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter");
        return null;
      }

      // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç Gemini (—É–±–∏—Ä–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
      const cleanContent = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      const parsedData = JSON.parse(cleanContent);
      const result = this.validateParsedQuery(parsedData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.parseCache.set(cacheKey, result);
      return result;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å OpenRouter:", error instanceof Error ? error.message : String(error));
      return null;
    }
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini —á–µ—Ä–µ–∑ OpenRouter
   */
  async enhanceResponse(data: any[], queryType: string, originalQuery: string): Promise<string | null> {
    if (!this.client) {
      return null;
    }

    try {
      const prompt = this.buildFormattingPrompt(data, queryType, originalQuery);
      
      const response = await this.client.post('/chat/completions', {
        model: 'google/gemini-2.5-flash-lite-preview-06-17',
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.3, // –ù–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        max_tokens: 2000
      });

      const content = response.data.choices[0]?.message?.content;
      return content || null;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å OpenRouter:", error instanceof Error ? error.message : String(error));
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞
   */
  private buildParsingPrompt(userQuery: string): string {
    const today = new Date().toISOString().split('T')[0];
    const yesterday = new Date(Date.now() - 86400000).toISOString().split('T')[0];

    return `–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞: "${userQuery}"

JSON:
{
  "employee_name": "–∏–º—è –∏–ª–∏ null",
  "project_name": "–ø—Ä–æ–µ–∫—Ç –∏–ª–∏ null",
  "start_date": "YYYY-MM-DD –∏–ª–∏ null",
  "end_date": "YYYY-MM-DD –∏–ª–∏ null",
  "query_type": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
  "intent": "–¥–µ–π—Å—Ç–≤–∏–µ",
  "entities": ["–∫–ª—é—á–µ–≤—ã–µ", "—Å–ª–æ–≤–∞"]
}

–î–∞—Ç—ã: —Å–µ–≥–æ–¥–Ω—è=${today}, –≤—á–µ—Ä–∞=${yesterday}
–ò–Ω—Ç–µ–Ω—Ç—ã: get_users, get_tasks, get_projects, get_report, search, help`;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
   */
  private buildFormattingPrompt(data: any[], queryType: string, originalQuery: string): string {
    return `–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!

–ó–∞–ø—Ä–æ—Å: "${originalQuery}"
–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(data, null, 2)}

–ó–∞–¥–∞—á–∞: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram:
- HTML: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>
- –≠–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ JSON
- –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ü–∏—Ñ—Ä—ã, –¥–∞—Ç—ã, –ø—Ä–æ–µ–∫—Ç—ã
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö

–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ - —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π!`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç—ã–º (–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ)
   */
  private isSimpleQuery(query: string): boolean {
    const simplePatterns = [
      /^—Å–ø–∏—Å–æ–∫ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π|—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤|–ø—Ä–æ–µ–∫—Ç–æ–≤)$/i,
      /^(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏|—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏|–ø—Ä–æ–µ–∫—Ç—ã)$/i,
      /^–ø–æ–º–æ—â—å$/i,
      /^—Å—Ç–∞—Ç—É—Å$/i,
      /^—á—Ç–æ —É–º–µ–µ—à—å\??$/i
    ];

    return simplePatterns.some(pattern => pattern.test(query.trim()));
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
   */
  private validateParsedQuery(data: any): ParsedQuery {
    return {
      employee_name: data.employee_name || undefined,
      project_name: data.project_name || undefined,
      start_date: data.start_date || undefined,
      end_date: data.end_date || undefined,
      query_type: data.query_type || "general",
      intent: data.intent || "unknown",
      entities: data.entities || []
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenRouter API
   */
  isAvailable(): boolean {
    return this.client !== null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const openRouterService = new OpenRouterService();
