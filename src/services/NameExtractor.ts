export class NameExtractor {
  private llmService: any;

  constructor(llmService?: any) {
    this.llmService = llmService;
  }

  async extractEmployeeName(query: string): Promise<string | null> {
    try {
      console.log(`üß† –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: "${query}"`);

      const prompt = `
–ó–∞–¥–∞—á–∞: –ò–∑–≤–ª–µ—á—å –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${query}"

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –ù–∞–π–¥–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
2. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–º—è/—Ñ–∞–º–∏–ª–∏—é/–æ—Ç—á–µ—Å—Ç–≤–æ
3. –ï—Å–ª–∏ –∏–º–µ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ - –≤–µ—Ä–Ω–∏ –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ
4. –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç - –≤–µ—Ä–Ω–∏ "–ù–ï–¢"

–ü—Ä–∏–º–µ—Ä—ã:
- "–ß—Ç–æ –¥–µ–ª–∞–ª –ö–∏—Ä–∏–ª–ª –≤—á–µ—Ä–∞?" ‚Üí "–ö–∏—Ä–∏–ª–ª"
- "–ó–∞–¥–∞—á–∏ –ß–µ—Ä–≤–æ—Ç–∫–∏–Ω–∞" ‚Üí "–ß–µ—Ä–≤–æ—Ç–∫–∏–Ω"  
- "–°–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞–ª –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤?" ‚Üí "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"
- "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" ‚Üí "–ù–ï–¢"
- "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º" ‚Üí "–ù–ï–¢"

–û—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –∏–º—è –∏–ª–∏ "–ù–ï–¢"):`;

      if (!this.llmService || !this.llmService.generateResponse) {
        console.log(`‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ`);
        return this.extractEmployeeNameSimple(query);
      }

      const response = await this.llmService.generateResponse(prompt, {
        temperature: 0.1,
        maxTokens: 50
      });

      const extractedName = response.trim();
      
      if (extractedName === "–ù–ï–¢" || extractedName.toLowerCase() === "–Ω–µ—Ç") {
        console.log(`‚ùå –ò–ò –Ω–µ –Ω–∞—à–µ–ª –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ`);
        return null;
      }

      console.log(`‚úÖ –ò–ò –∏–∑–≤–ª–µ–∫ –∏–º—è: "${extractedName}"`);
      return extractedName;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –ò–ò:', error);
      return null;
    }
  }

  // Fallback –º–µ—Ç–æ–¥ - –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
  extractEmployeeNameSimple(query: string): string | null {
    console.log(`üîç –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑: "${query}"`);
    
    const queryLower = query.toLowerCase();
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω
    const namePatterns = [
      // –ü–æ–ª–Ω—ã–µ –∏–º–µ–Ω–∞ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)
      /([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)/g,
      // –ò–º—è –§–∞–º–∏–ª–∏—è
      /([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)/g,
      // –û—Ç–¥–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ (–ª—é–±—ã–µ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã)
      /([–ê-–Ø–Å][–∞-—è—ë]{2,})/g
    ];

    for (const pattern of namePatterns) {
      const matches = query.match(pattern);
      if (matches && matches.length > 0) {
        const name = matches[0].trim();
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–º—è: "${name}"`);
        return name;
      }
    }

    console.log(`‚ùå –ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ`);
    return null;
  }

  // –ì–∏–±—Ä–∏–¥–Ω—ã–π –º–µ—Ç–æ–¥ - —Å–Ω–∞—á–∞–ª–∞ –ò–ò, –ø–æ—Ç–æ–º fallback
  async extractName(query: string): Promise<string | null> {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ò–ò
    const aiResult = await this.extractEmployeeName(query);
    if (aiResult) {
      return aiResult;
    }

    // –ï—Å–ª–∏ –ò–ò –Ω–µ –ø–æ–º–æ–≥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    console.log(`üîÑ –ò–ò –Ω–µ –ø–æ–º–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ`);
    return this.extractEmployeeNameSimple(query);
  }
}
