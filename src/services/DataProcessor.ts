import { SimpleDocumentAPIAdapter } from "../adapters/SimpleDocumentAPIAdapter";

export interface ProcessedData {
  summary: {
    totalUsers: number;
    totalTasks: number;
    totalTimeEntries: number;
    totalProjects: number;
    dateRange: string;
    hasOverdueInfo?: boolean;
  };
  employees: Array<{
    name: string;
    id: string;
    taskCount: number;
    totalHours: number;
    recentTasks: string[];
    allTasks: Array<{
      title: string;
      description: string;
      date: string;
      hours: number;
      status: string;
    }>;
    workTypes: string[];
    projects: string[];
    timeEntries: Array<{
      date: string;
      hours: number;
      description: string;
      taskId: string;
      projectId: string;
      workType: string;
    }>;
    hasOverdueTasks?: boolean;
  }>;
  recentActivity: Array<{
    date: string;
    employee: string;
    task: string;
    hours: number;
    description: string;
  }>;
  topTasks: Array<{
    title: string;
    employee: string;
    hours: number;
    status: string;
  }>;
  overdueInfo?: {
    hasOverdue: boolean;
    employeeName?: string;
    details?: string;
  };
}

export class DataProcessor {
  private adapter: SimpleDocumentAPIAdapter;

  constructor() {
    this.adapter = new SimpleDocumentAPIAdapter();
  }

  async processQueryData(userQuery: string): Promise<ProcessedData> {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞...');

    // –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üë• –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...');
    const allEmployees = await this.loadAllEmployees();

    // –≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å
    console.log('üß† –≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é...');
    const queryContext = this.analyzeQueryWithEmployees(userQuery, allEmployees);
    console.log('üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:', queryContext);

    // –≠–¢–ê–ü 3: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞
    console.log('üì• –≠–¢–ê–ü 3: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const rawData = await this.loadDataSequentially(queryContext);

    // –≠–¢–ê–ü 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    console.log('üîÑ –≠–¢–ê–ü 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    const processedData = this.aggregateData(rawData, queryContext);

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è LLM:', {
      employees: processedData.employees.length,
      recentActivity: processedData.recentActivity.length,
      topTasks: processedData.topTasks.length
    });

    return processedData;
  }

  private async loadAllEmployees() {
    console.log('üë• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const allEmployees = await this.adapter.getAllEmployees();

    if (!allEmployees.success || allEmployees.data.length === 0) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
    }

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${allEmployees.data.length}`);
    return allEmployees.data;
  }

  private analyzeQueryWithEmployees(query: string, employees: any[]) {
    const queryLower = query.toLowerCase();
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å:', queryLower);

    const context = {
      employeeName: this.extractEmployeeName(queryLower, employees),
      timeframe: this.extractTimeframe(queryLower),
      queryType: this.detectQueryType(queryLower),
      needsDetailed: queryLower.includes('–ø–æ–¥—Ä–æ–±–Ω–æ') || queryLower.includes('–¥–µ—Ç–∞–ª—å–Ω–æ'),
      needsStats: queryLower.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') || queryLower.includes('—Å–∫–æ–ª—å–∫–æ') || queryLower.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
      needsTasks: this.needsTasks(queryLower),
      needsTimeEntries: this.needsTimeEntries(queryLower),
      needsProjects: this.needsProjects(queryLower),
      needsOverdue: this.needsOverdue(queryLower),
      employees: employees
    };

    console.log('üìã –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö:', {
      tasks: context.needsTasks,
      timeEntries: context.needsTimeEntries,
      projects: context.needsProjects,
      overdue: context.needsOverdue
    });

    return context;
  }

  private needsTasks(query: string): boolean {
    return query.includes('–∑–∞–¥–∞—á') || query.includes('–∑–∞–¥–∞—á–∏') ||
           query.includes('—á—Ç–æ –¥–µ–ª–∞–ª') || query.includes('—Ä–∞–±–æ—Ç–∞–ª –Ω–∞–¥') ||
           query.includes('–≤—ã–ø–æ–ª–Ω–∏–ª') || query.includes('—Å–¥–µ–ª–∞–ª');
  }

  private needsTimeEntries(query: string): boolean {
    return query.includes('–≤—Ä–µ–º—è') || query.includes('—á–∞—Å–æ–≤') ||
           query.includes('—Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç') || query.includes('—Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞–ª') ||
           query.includes('–æ—Ç—Ä–∞–±–æ—Ç–∞–ª') || query.includes('–ø–æ—Ç—Ä–∞—Ç–∏–ª');
  }

  private needsProjects(query: string): boolean {
    return query.includes('–ø—Ä–æ–µ–∫—Ç') || query.includes('–ø—Ä–æ–µ–∫—Ç—ã') ||
           query.includes('–ø—Ä–æ–µ–∫—Ç–∞—Ö') || query.includes('–ø–æ –ø—Ä–æ–µ–∫—Ç—É');
  }

  private needsOverdue(query: string): boolean {
    return query.includes('–ø—Ä–æ—Å—Ä–æ—á–µ–Ω') || query.includes('–ø—Ä–æ—Å—Ä–æ—á–∫–∞') ||
           query.includes('–¥–µ–¥–ª–∞–π–Ω') || query.includes('–æ–ø–æ–∑–¥–∞–ª') ||
           query.includes('–Ω–µ —É—Å–ø–µ–ª') || query.includes('–∑–∞–¥–µ—Ä–∂–∫–∞');
  }

  private analyzeQuery(query: string, employees: any[]) {
    const queryLower = query.toLowerCase();

    return {
      employeeName: this.extractEmployeeName(queryLower, employees),
      timeframe: this.extractTimeframe(queryLower),
      queryType: this.detectQueryType(queryLower),
      needsDetailed: queryLower.includes('–ø–æ–¥—Ä–æ–±–Ω–æ') || queryLower.includes('–¥–µ—Ç–∞–ª—å–Ω–æ'),
      needsStats: queryLower.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') || queryLower.includes('—Å–∫–æ–ª—å–∫–æ') || queryLower.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    };
  }

  private extractEmployeeName(query: string, employees: any[]): string | undefined {
    console.log('üîç –ò—â–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:', query);
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:', employees.map(e => e.name).slice(0, 5), '...');

    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∏–º–µ–Ω–∞–º–∏ –∏–∑ –±–∞–∑—ã
    for (const employee of employees) {
      const fullName = employee.name.toLowerCase();
      const nameParts = fullName.split(' ');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
      if (query.includes(fullName)) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –∏–º—è:', employee.name);
        return employee.name;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏ (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –æ—Ç—á–µ—Å—Ç–≤–æ)
      for (const part of nameParts) {
        if (part.length > 2 && query.includes(part)) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏:', part, '‚Üí', employee.name);
          return employee.name;
        }
      }
    }

    // –ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, –∏—â–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    const namePatterns = [
      // –ü–æ–ª–Ω—ã–µ –∏–º–µ–Ω–∞ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)
      /([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)/g,
      // –ò–º—è –§–∞–º–∏–ª–∏—è
      /([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)/g,
      // –û—Ç–¥–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ (–ª—é–±—ã–µ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã)
      /([–ê-–Ø–Å][–∞-—è—ë]{2,})/g,
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–º–µ–Ω–∞
      /([A-Z][a-z]{2,})/g
    ];

    for (const pattern of namePatterns) {
      const matches = query.match(pattern);
      if (matches && matches.length > 0) {
        const foundName = matches[0].trim();
        console.log('üîç –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –∏–º–µ–Ω–∏:', foundName);

        // –ò—â–µ–º –ø–æ—Ö–æ–∂–µ–µ –∏–º—è –≤ –±–∞–∑–µ
        for (const employee of employees) {
          if (employee.name.toLowerCase().includes(foundName.toLowerCase())) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–µ–µ –∏–º—è:', foundName, '‚Üí', employee.name);
            return employee.name;
          }
        }
      }
    }

    console.log('‚ùå –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ');
    return undefined;
  }

  private extractTimeframe(query: string) {
    const today = new Date();
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –≤ –∑–∞–ø—Ä–æ—Å–µ:', query);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    const yearPatterns = [
      /(\d{4})\s*–≥–æ–¥/,           // "2024 –≥–æ–¥—É"
      /(\d{4})\s*–≥/,             // "2024 –≥"
      /–≤\s*(\d{4})/,             // "–≤ 2024"
      /(\d{4})/                  // –ø—Ä–æ—Å—Ç–æ "2024"
    ];

    let year = null;
    for (const pattern of yearPatterns) {
      const match = query.match(pattern);
      if (match) {
        year = parseInt(match[1]);
        break;
      }
    }
    console.log('üìÖ –ù–∞–π–¥–µ–Ω –≥–æ–¥:', year);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const monthNames = {
      '—è–Ω–≤–∞—Ä': 0, '—è–Ω–≤': 0,
      '—Ñ–µ–≤—Ä–∞–ª': 1, '—Ñ–µ–≤': 1,
      '–º–∞—Ä—Ç': 2, '–º–∞—Ä': 2,
      '–∞–ø—Ä–µ–ª': 3, '–∞–ø—Ä': 3,
      '–º–∞–π': 4, '–º–∞—è': 4,
      '–∏—é–Ω': 5, '–∏—é–Ω—è': 5,
      '–∏—é–ª': 6, '–∏—é–ª—è': 6,
      '–∞–≤–≥—É—Å—Ç': 7, '–∞–≤–≥': 7,
      '—Å–µ–Ω—Ç—è–±—Ä': 8, '—Å–µ–Ω': 8,
      '–æ–∫—Ç—è–±—Ä': 9, '–æ–∫—Ç': 9,
      '–Ω–æ—è–±—Ä': 10, '–Ω–æ—è': 10,
      '–¥–µ–∫–∞–±—Ä': 11, '–¥–µ–∫': 11
    };

    let month = null;
    let monthName = '';
    for (const [name, index] of Object.entries(monthNames)) {
      if (query.includes(name)) {
        month = index;
        monthName = name;
        break;
      }
    }
    console.log('üìÖ –ù–∞–π–¥–µ–Ω –º–µ—Å—è—Ü:', monthName, '‚Üí', month);

    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    if (month !== null && year !== null) {
      const startDate = new Date(year, month, 1);
      const endDate = new Date(year, month + 1, 0); // –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞

      console.log('‚úÖ –ü–µ—Ä–∏–æ–¥:', startDate.toISOString().split('T')[0], '‚Üí', endDate.toISOString().split('T')[0]);

      return {
        start: startDate.toISOString().split('T')[0],
        end: endDate.toISOString().split('T')[0],
        label: `${monthName} ${year} –≥–æ–¥–∞`
      };
    }

    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
    if (month !== null) {
      const currentYear = today.getFullYear();
      const startDate = new Date(currentYear, month, 1);
      const endDate = new Date(currentYear, month + 1, 0);

      return {
        start: startDate.toISOString().split('T')[0],
        end: endDate.toISOString().split('T')[0],
        label: `${monthName} ${currentYear} –≥–æ–¥–∞`
      };
    }

    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –≥–æ–¥
    if (year !== null) {
      const startDate = new Date(year, 0, 1);
      const endDate = new Date(year, 11, 31);

      return {
        start: startDate.toISOString().split('T')[0],
        end: endDate.toISOString().split('T')[0],
        label: `${year} –≥–æ–¥`
      };
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    if (query.includes('–≤—á–µ—Ä–∞')) {
      const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
      return {
        start: yesterday.toISOString().split('T')[0],
        end: yesterday.toISOString().split('T')[0],
        label: '–≤—á–µ—Ä–∞'
      };
    }

    if (query.includes('—Å–µ–≥–æ–¥–Ω—è')) {
      return {
        start: today.toISOString().split('T')[0],
        end: today.toISOString().split('T')[0],
        label: '—Å–µ–≥–æ–¥–Ω—è'
      };
    }

    if (query.includes('–Ω–µ–¥–µ–ª—é') || query.includes('–Ω–µ–¥–µ–ª–µ')) {
      const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
      return {
        start: weekAgo.toISOString().split('T')[0],
        end: today.toISOString().split('T')[0],
        label: '–∑–∞ –Ω–µ–¥–µ–ª—é'
      };
    }

    if (query.includes('–º–µ—Å—è—Ü')) {
      const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);
      return {
        start: monthAgo.toISOString().split('T')[0],
        end: today.toISOString().split('T')[0],
        label: '–∑–∞ –º–µ—Å—è—Ü'
      };
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥)
    const yearAgo = new Date(today.getTime() - 365 * 24 * 60 * 60 * 1000);
    console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    return {
      start: yearAgo.toISOString().split('T')[0],
      end: today.toISOString().split('T')[0],
      label: '–∑–∞ –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
    };
  }

  private detectQueryType(query: string): string {
    if (query.includes('—á—Ç–æ –¥–µ–ª–∞–ª') || query.includes('—Ä–∞–±–æ—Ç–∞–ª –Ω–∞–¥')) return 'activity';
    if (query.includes('—Å–∫–æ–ª—å–∫–æ') || query.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')) return 'statistics';
    if (query.includes('–∑–∞–¥–∞—á') || query.includes('–∑–∞–¥–∞—á–∏')) return 'tasks';
    if (query.includes('–≤—Ä–µ–º—è') || query.includes('—á–∞—Å–æ–≤')) return 'time';
    if (query.includes('–ø—Ä–æ–µ–∫—Ç') || query.includes('–ø—Ä–æ–µ–∫—Ç—ã')) return 'projects';
    if (query.includes('–ø—Ä–æ—Å—Ä–æ—á–µ–Ω') || query.includes('–ø—Ä–æ—Å—Ä–æ—á–∫–∞')) return 'overdue';
    return 'general';
  }

  private async loadDataSequentially(context: any) {
    console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');

    const result: any = {
      users: context.employees,
      workTypes: [],
      tasks: [],
      timeEntries: [],
      projects: [],
      overdueInfo: null
    };

    // –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã —Ä–∞–±–æ—Ç (–±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å)
    console.log('‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã —Ä–∞–±–æ—Ç...');
    try {
      result.workTypes = await this.adapter.getWorkTypes();
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç: ${result.workTypes.length}`);
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç:', error);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (context.needsTasks) {
      console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏...');
      try {
        const tasksResponse = await this.adapter.getEmployeeTasks({
          employee_name: context.employeeName,
          limit: context.employeeName ? 100 : 50
        });
        result.tasks = tasksResponse.success ? tasksResponse.data : [];
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: ${result.tasks.length}`);
      } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:', error);
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (context.needsTimeEntries) {
      console.log('‚è∞ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏...');
      try {
        const timeResponse = await this.adapter.getTimeEntries({
          employee_name: context.employeeName,
          start_date: context.timeframe.start,
          end_date: context.timeframe.end,
          limit: context.employeeName ? 200 : 100
        });
        result.timeEntries = timeResponse.success ? timeResponse.data : [];
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏: ${result.timeEntries.length}`);
      } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏:', error);
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (context.needsProjects) {
      console.log('üèóÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã...');
      try {
        const projectsResponse = await this.adapter.getProjects({ limit: 30 });
        result.projects = projectsResponse.success ? projectsResponse.data : [];
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${result.projects.length}`);
      } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (context.needsOverdue && context.employeeName) {
      console.log('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏...');
      try {
        // –ù–∞–π–¥–µ–º userId —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        const employee = context.employees.find((emp: any) =>
          emp.name.toLowerCase().includes(context.employeeName.toLowerCase())
        );

        if (employee && employee.id) {
          result.overdueInfo = await this.checkOverdueTasks(employee.id);
          console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, result.overdueInfo);
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏:', error);
      }
    }

    console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', {
      users: result.users.length,
      workTypes: result.workTypes.length,
      tasks: result.tasks.length,
      timeEntries: result.timeEntries.length,
      projects: result.projects.length,
      hasOverdueInfo: !!result.overdueInfo
    });

    return result;
  }

  private async checkOverdueTasks(userId: string) {
    console.log(`‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å legacy API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
      // –ü–æ—Å–∫–æ–ª—å–∫—É –≤ –Ω–æ–≤–æ–º API –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ checkOverdueTasks, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
      const api = this.adapter as any;

      if (api.api && typeof api.api.checkOverdueTasks === 'function') {
        const result = await api.api.checkOverdueTasks(userId);
        return {
          hasOverdue: result.result || false,
          details: result.result ? '–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏' : '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç'
        };
      } else {
        // Fallback: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É
        console.log('üìã Legacy API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É...');
        // –ù–∞–π–¥–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
        const employee = this.findEmployeeName(userId, []);
        const tasksResponse = await this.adapter.getEmployeeTasks({
          employee_name: employee || undefined,
          limit: 100
        });

        if (tasksResponse.success) {
          const today = new Date();
          const overdueTasks = tasksResponse.data.filter((task: any) => {
            if (task.date && task.status !== 'completed') {
              const taskDate = new Date(task.date);
              return taskDate < today;
            }
            return false;
          });

          return {
            hasOverdue: overdueTasks.length > 0,
            details: overdueTasks.length > 0
              ? `–ù–∞–π–¥–µ–Ω–æ ${overdueTasks.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á`
              : '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç'
          };
        }
      }

      return {
        hasOverdue: false,
        details: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫—É'
      };
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏:', error);
      return {
        hasOverdue: false,
        details: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏'
      };
    }
  }

  private async loadRelevantData(context: any) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const limits = {
      tasks: context.employeeName ? 1000 : 500, // –ú–∞–∫—Å–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö
      timeEntries: context.employeeName ? 2000 : 1000, // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏
      projects: 100 // –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
    };

    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ª–∏–º–∏—Ç–∞–º–∏:', limits);
    console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', context.timeframe);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    const yearAgo = new Date();
    yearAgo.setFullYear(yearAgo.getFullYear() - 2); // –ó–∞ 2 –≥–æ–¥–∞

    return await this.adapter.loadAllData({
      employee_name: context.employeeName,
      start_date: yearAgo.toISOString().split('T')[0], // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞ 2 –≥–æ–¥–∞
      end_date: new Date().toISOString().split('T')[0], // –î–æ —Å–µ–≥–æ–¥–Ω—è
      ...limits
    });
  }

  private aggregateData(rawData: any, context: any): ProcessedData {
    console.log('üîÑ –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–º—É –ø–µ—Ä–∏–æ–¥—É:', context.timeframe);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
    const filteredData = this.filterDataByTimeframe(rawData, context.timeframe);

    console.log('üìä –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', {
      allTasks: rawData.tasks.length,
      filteredTasks: filteredData.tasks.length,
      allTimeEntries: rawData.timeEntries.length,
      filteredTimeEntries: filteredData.timeEntries.length
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    const employeeStats = this.groupByEmployee(filteredData);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    if (rawData.overdueInfo && context.employeeName) {
      const targetEmployee = employeeStats.find(emp =>
        emp.name.toLowerCase().includes(context.employeeName.toLowerCase())
      );
      if (targetEmployee) {
        targetEmployee.hasOverdueTasks = rawData.overdueInfo.hasOverdue;
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥
    const recentActivity = this.getRecentActivity(filteredData, 100);

    // –ó–∞–¥–∞—á–∏ –∑–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥
    const topTasks = this.getTopTasks(filteredData, 50);

    const result: ProcessedData = {
      summary: {
        totalUsers: rawData.users.length,
        totalTasks: filteredData.tasks.length,
        totalTimeEntries: filteredData.timeEntries.length,
        totalProjects: filteredData.projects.length,
        dateRange: context.timeframe.label,
        hasOverdueInfo: !!rawData.overdueInfo
      },
      employees: employeeStats,
      recentActivity,
      topTasks
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (rawData.overdueInfo) {
      result.overdueInfo = {
        hasOverdue: rawData.overdueInfo.hasOverdue,
        employeeName: context.employeeName,
        details: rawData.overdueInfo.details
      };
    }

    return result;
  }

  // –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
  private filterDataByTimeframe(rawData: any, timeframe: any) {
    const startDate = timeframe.start;
    const endDate = timeframe.end;

    console.log(`üóìÔ∏è –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å ${startDate} –ø–æ ${endDate}`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –¥–∞—Ç–µ
    const filteredTimeEntries = rawData.timeEntries.filter((entry: any) => {
      return entry.date >= startDate && entry.date <= endDate;
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ
    const filteredTasks = rawData.tasks.filter((task: any) => {
      return task.date >= startDate && task.date <= endDate;
    });

    // –ü—Ä–æ–µ–∫—Ç—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ (–æ–Ω–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–∞—Ç–∞–º)
    const filteredProjects = rawData.projects;

    return {
      ...rawData,
      tasks: filteredTasks,
      timeEntries: filteredTimeEntries,
      projects: filteredProjects
    };
  }

  private groupByEmployee(rawData: any) {
    const employeeMap = new Map();

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Å –ø–æ–ª–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
    rawData.tasks.forEach((task: any) => {
      const employeeName = this.findEmployeeName(task.employee_id, rawData.users);
      if (!employeeMap.has(employeeName)) {
        employeeMap.set(employeeName, {
          name: employeeName,
          id: task.employee_id,
          taskCount: 0,
          totalHours: 0,
          recentTasks: [],
          allTasks: [], // –í—Å–µ –∑–∞–¥–∞—á–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
          workTypes: new Set(), // –¢–∏–ø—ã —Ä–∞–±–æ—Ç
          projects: new Set(), // –ü—Ä–æ–µ–∫—Ç—ã
          timeEntries: [] // –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
        });
      }

      const employee = employeeMap.get(employeeName);
      employee.taskCount++;
      employee.recentTasks.push(task.title);
      employee.allTasks.push({
        title: task.title,
        description: task.description,
        date: task.date,
        hours: task.hours,
        status: task.status
      });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç
    rawData.timeEntries.forEach((entry: any) => {
      const employeeName = this.findEmployeeName(entry.employee_id, rawData.users);
      if (employeeMap.has(employeeName)) {
        const employee = employeeMap.get(employeeName);
        employee.totalHours += entry.hours;
        employee.timeEntries.push({
          date: entry.date,
          hours: entry.hours,
          description: entry.description,
          taskId: entry.task_id,
          projectId: entry.project_id,
          workType: entry.work_type
        });

        // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç
        if (entry.work_type) {
          employee.workTypes.add(entry.work_type);
        }
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
    rawData.projects.forEach((project: any) => {
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º
      rawData.timeEntries.forEach((entry: any) => {
        if (entry.project_id === project.id) {
          const employeeName = this.findEmployeeName(entry.employee_id, rawData.users);
          if (employeeMap.has(employeeName)) {
            employeeMap.get(employeeName).projects.add(project.name);
          }
        }
      });
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Set –≤ –º–∞—Å—Å–∏–≤—ã –¥–ª—è JSON
    const employees = Array.from(employeeMap.values()).map(emp => ({
      ...emp,
      workTypes: Array.from(emp.workTypes),
      projects: Array.from(emp.projects)
    }));

    return employees; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï–• —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
  }

  private getRecentActivity(rawData: any, limit: number) {
    return rawData.timeEntries
      .sort((a: any, b: any) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .slice(0, limit)
      .map((entry: any, index: number) => {
        let taskName = this.findTaskName(entry.task_id, rawData.tasks);

        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–æ–º–µ—Ä
        if (!taskName || taskName.includes('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è') || taskName.includes('–∑–∞–¥–∞—á–∞')) {
          if (entry.description && entry.description.trim()) {
            taskName = `–ó–∞–¥–∞—á–∞ ‚Ññ${index + 1}`;
          } else {
            taskName = `–ó–∞–¥–∞—á–∞ ‚Ññ${index + 1}`;
          }
        }

        return {
          date: entry.date,
          employee: this.findEmployeeName(entry.employee_id, rawData.users),
          task: taskName,
          hours: entry.hours,
          description: entry.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'
        };
      });
  }

  private getTopTasks(rawData: any, limit: number) {
    const taskHours = new Map();
    
    rawData.timeEntries.forEach((entry: any) => {
      const taskName = this.findTaskName(entry.task_id, rawData.tasks);
      if (!taskHours.has(taskName)) {
        taskHours.set(taskName, {
          title: taskName,
          employee: this.findEmployeeName(entry.employee_id, rawData.users),
          hours: 0,
          status: 'active'
        });
      }
      taskHours.get(taskName).hours += entry.hours;
    });

    return Array.from(taskHours.values())
      .sort((a, b) => b.hours - a.hours)
      .slice(0, limit);
  }

  private findEmployeeName(employeeId: string, users: any[]): string {
    const user = users.find(u => u.id === employeeId);
    return user ? user.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫';
  }

  private findTaskName(taskId: string, tasks: any[]): string {
    const task = tasks.find(t => t.id === taskId);
    if (task && task.title) {
      return task.title;
    }

    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
    const taskIndex = tasks.findIndex(t => t.id === taskId);
    if (taskIndex >= 0) {
      return `–ó–∞–¥–∞—á–∞ ‚Ññ${taskIndex + 1}`;
    }

    return `–ó–∞–¥–∞—á–∞ ‚Ññ${Math.floor(Math.random() * 100) + 1}`;
  }
}
