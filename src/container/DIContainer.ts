import { IDocumentAPI, ILegacyDocumentAPI } from "../interfaces/IDocumentAPI";
import { MockDocumentAPI } from "../implementations/MockDocumentAPI";
import { MockDocumentAPINew } from "../implementations/MockDocumentAPINew";
import { RealDocumentAPI } from "../implementations/RealDocumentAPI";
import { HybridDocumentAPI } from "../implementations/HybridDocumentAPI";
type ServiceFactory<T> = () => T;
type ServiceInstance<T> = T;

export class DIContainer {
  private services = new Map<string, ServiceFactory<any> | ServiceInstance<any>>();
  private singletons = new Map<string, any>();
  registerSingleton<T>(token: string, factory: ServiceFactory<T>): void {
    this.services.set(token, factory);
  }

  registerInstance<T>(token: string, instance: ServiceInstance<T>): void {
    this.services.set(token, instance);
    this.singletons.set(token, instance);
  }
  resolve<T>(token: string): T {
    if (this.singletons.has(token)) {
      return this.singletons.get(token);
    }

    const serviceOrFactory = this.services.get(token);

    if (!serviceOrFactory) {
      throw new Error(`Service with token "${token}" is not registered`);
    }

    if (typeof serviceOrFactory === 'function') {
      const instance = serviceOrFactory();
      this.singletons.set(token, instance);
      return instance;
    }

    return serviceOrFactory;
  }

  isRegistered(token: string): boolean {
    return this.services.has(token);
  }

  clear(): void {
    this.services.clear();
    this.singletons.clear();
  }

  switchToMode(mode: 'mock' | 'real' | 'hybrid'): void {
    this.singletons.delete(SERVICE_TOKENS.DOCUMENT_API);
    this.singletons.delete(SERVICE_TOKENS.LEGACY_DOCUMENT_API);

    configureContainer(mode);

    console.log(`üîÑ API –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º: ${mode.toUpperCase()}`);
  }
}

export const SERVICE_TOKENS = {
  DOCUMENT_API: 'IDocumentAPI',
  LEGACY_DOCUMENT_API: 'ILegacyDocumentAPI'
} as const;

export const container = new DIContainer();
export class APIContainer {
  private currentMode: 'mock' | 'real' | 'hybrid' = 'hybrid';

  switchToMock(): void {
    this.currentMode = 'mock';
    container.switchToMode('mock');
  }

  switchToReal(): void {
    this.currentMode = 'real';
    container.switchToMode('real');
  }

  switchToHybrid(): void {
    this.currentMode = 'hybrid';
    container.switchToMode('hybrid');
  }

  getCurrentMode(): 'mock' | 'real' | 'hybrid' {
    return this.currentMode;
  }

  getAPI(): IDocumentAPI {
    return container.resolve<IDocumentAPI>(SERVICE_TOKENS.DOCUMENT_API);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
export function configureContainer(
  mode: 'mock' | 'real' | 'hybrid' = 'hybrid'
): void {
  console.log(`üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ IoC –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${mode.toUpperCase()} API`);

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API
  switch (mode) {
    case 'mock':
      container.registerSingleton<IDocumentAPI>(
        SERVICE_TOKENS.DOCUMENT_API,
        () => new MockDocumentAPINew()
      );
      break;
    case 'real':
      container.registerSingleton<IDocumentAPI>(
        SERVICE_TOKENS.DOCUMENT_API,
        () => new RealDocumentAPI()
      );
      break;
    case 'hybrid':
    default:
      container.registerSingleton<IDocumentAPI>(
        SERVICE_TOKENS.DOCUMENT_API,
        () => new HybridDocumentAPI()
      );
      break;
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π API –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∞–¥–∞–ø—Ç–µ—Ä–æ–º
  switch (mode) {
    case 'mock':
      container.registerSingleton<ILegacyDocumentAPI>(
        SERVICE_TOKENS.LEGACY_DOCUMENT_API,
        () => new MockDocumentAPI()
      );
      break;
    case 'real':
      // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∏—Å–ø–æ–ª—å–∑—É–µ–º Mock –∫–∞–∫ fallback –¥–ª—è legacy –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      container.registerSingleton<ILegacyDocumentAPI>(
        SERVICE_TOKENS.LEGACY_DOCUMENT_API,
        () => new MockDocumentAPI()
      );
      break;
    case 'hybrid':
    default:
      // –î–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Mock –∫–∞–∫ fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ API
      container.registerSingleton<ILegacyDocumentAPI>(
        SERVICE_TOKENS.LEGACY_DOCUMENT_API,
        () => new MockDocumentAPI()
      );
      break;
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function getAPIMode(): 'mock' | 'real' | 'hybrid' {
  if (process.env.USE_MOCK_API === 'true') {
    return 'mock';
  } else if (process.env.USE_REAL_API === 'true') {
    return 'real';
  } else {
    return 'hybrid'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º
  }
}

const apiMode = getAPIMode();
configureContainer(apiMode);

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
export const apiContainer = new APIContainer();

// –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API
export function getDocumentAPI(): IDocumentAPI {
  return container.resolve<IDocumentAPI>(SERVICE_TOKENS.DOCUMENT_API);
}

export function getLegacyDocumentAPI(): ILegacyDocumentAPI {
  return container.resolve<ILegacyDocumentAPI>(SERVICE_TOKENS.LEGACY_DOCUMENT_API);
}
