import { DocumentAPITester } from './api-tester';

class SpecificAPITests {
  private tester = new DocumentAPITester();

  async testUserRetrieval() {
    console.log('\nüë• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('=' .repeat(40));

    const testCases = [
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      { users: '' },
      { userId: '' },
      { users: '–ß–µ—Ä–≤–æ—Ç–∫–∏–Ω' },
      { userId: '–ß–µ—Ä–≤–æ—Ç–∫–∏–Ω' },
      { users: '–ó–æ–ª–æ—Ç–∞—Ä–µ–≤' },
      { userId: '–ó–æ–ª–æ—Ç–∞—Ä–µ–≤' },
      { users: '–ß–µ—Ä–≤–æ—Ç–∫–∏–Ω,–ó–æ–ª–æ—Ç–∞—Ä–µ–≤' },
      { userId: '–ß–µ—Ä–≤–æ—Ç–∫–∏–Ω,–ó–æ–ª–æ—Ç–∞—Ä–µ–≤' },
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
      { users: '–ß–µ—Ä–≤' },
      { users: '–ö–∏—Ä–∏–ª–ª' },
      { users: '–°–µ—Ä–≥–µ–π' },
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ—à–∏–±–∫–∞–º–∏
      { users: '–ß–µ—Ä–≤–æ—Ç–∫–∏' },
      { users: '–ö–∏—Ä–∏–ª' },
    ];

    for (const params of testCases) {
      await this.tester.testSpecificEndpoint('/users', params);
      await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }
  }

  async testTaskRetrieval() {
    console.log('\nüìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –ó–ê–î–ê–ß');
    console.log('=' .repeat(40));

    const testCases = [
      // –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      undefined,
      // –° –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ userId
      { userId: '5d99b0f7-6675-11ee-b922-b52194aab495' }, // –ó–æ–ª–æ—Ç–∞—Ä–µ–≤
      { userId: '7d44b0f7-3313-11ee-b922-b52194aab947' }, // –ß–µ—Ä–≤–æ—Ç–∫–∏–Ω
      // –° –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ userId
      { userId: 'unknown-user-id' },
      // –° –ø—É—Å—Ç—ã–º userId
      { userId: '' },
    ];

    for (const params of testCases) {
      console.log(`\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`, params || '–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
      await this.tester.testSpecificEndpoint('/tasks', params);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  async testStufftimeRetrieval() {
    console.log('\n‚è±Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –¢–†–£–î–û–ó–ê–¢–†–ê–¢');
    console.log('=' .repeat(40));

    const testCases = [
      // –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      undefined,
      // –ó–∞ —Å–µ–≥–æ–¥–Ω—è
      { 
        from: new Date().toISOString().slice(0, 10).replace(/-/g, '') + '000000',
        to: new Date().toISOString().slice(0, 10).replace(/-/g, '') + '235959'
      },
      // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
      {
        from: '20241201000000',
        to: '20241231235959'
      },
      // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
      {
        from: '20241220000000',
        to: '20241227235959'
      },
      // –° –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      {
        userId: '7d44b0f7-3313-11ee-b922-b52194aab947',
        from: '20241201000000',
        to: '20241231235959'
      },
      // –° –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      {
        userId: '5d99b0f7-6675-11ee-b922-b52194aab495,7d44b0f7-3313-11ee-b922-b52194aab947',
        from: '20241201000000',
        to: '20241231235959'
      }
    ];

    for (const params of testCases) {
      console.log(`\n‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`, params || '–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
      await this.tester.testSpecificEndpoint('/stufftime', params);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  async testProjectRetrieval() {
    console.log('\nüèóÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–†–û–ï–ö–¢–û–í');
    console.log('=' .repeat(40));

    const testCases = [
      { projectName: '–ê–π–¢–∏ –ü–ª–∞–Ω' },
      { projectName: '–†–∞–∑–≤–∏—Ç–∏–µ' },
      { projectName: '–ê–°–ö–û–ù–ê' },
      { projectName: '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç' },
      { projectName: '–ø–µ—Ä—Å–æ–Ω–∞–ª' },
      { projectName: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç' },
      { projectName: '' },
    ];

    for (const params of testCases) {
      console.log(`\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`, params);
      await this.tester.testSpecificEndpoint('/project', params);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  async testDataConsistency() {
    console.log('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–ò –î–ê–ù–ù–´–•');
    console.log('=' .repeat(40));

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      const usersResult = await this.tester.testEndpoint('/users', 'GET', { users: '–ß–µ—Ä–≤–æ—Ç–∫–∏–Ω' });
      
      if (usersResult.success && usersResult.data && usersResult.data.length > 0) {
        const user = usersResult.data[0];
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.userName} (ID: ${user.userId})`);

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('2. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const tasksResult = await this.tester.testEndpoint('/tasks', 'GET', { userId: user.userId });
        
        if (tasksResult.success) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${tasksResult.data?.length || 0}`);
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('3. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const stufftimeResult = await this.tester.testEndpoint('/stufftime', 'GET', { 
          userId: user.userId,
          from: '20241201000000',
          to: '20241231235959'
        });
        
        if (stufftimeResult.success) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏: ${stufftimeResult.data?.length || 0}`);
          
          if (stufftimeResult.data && stufftimeResult.data.length > 0) {
            const timeEntry = stufftimeResult.data[0];
            console.log(`üìä –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏:`, {
              user: timeEntry.user,
              minutes: timeEntry.countOfMinutes,
              entries: timeEntry.stufftime?.length || 0
            });
          }
        }

      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏:', error);
    }
  }

  async runAllSpecificTests() {
    console.log('üß™ –ó–ê–ü–£–°–ö –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–• –¢–ï–°–¢–û–í API');
    console.log('=' .repeat(50));

    await this.testUserRetrieval();
    await this.testTaskRetrieval();
    await this.testStufftimeRetrieval();
    await this.testProjectRetrieval();
    await this.testDataConsistency();

    console.log('\n‚úÖ –í–°–ï –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´');
  }
}

async function runSpecificTests() {
  const tester = new SpecificAPITests();
  await tester.runAllSpecificTests();
}

if (require.main === module) {
  runSpecificTests().catch(console.error);
}

export { SpecificAPITests, runSpecificTests };
